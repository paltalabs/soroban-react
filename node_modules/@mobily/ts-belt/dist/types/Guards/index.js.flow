// @flow

import type { GuardValue } from "../types";
import type { GuardObject } from "../types";
import type { GuardPromise } from "../types";
import type { GuardArray } from "../types";
declare export function isString<A>(value: A | string): boolean;
declare export function isNumber<A>(value: A | number): boolean;
declare export function isBoolean<A>(value: A | boolean): boolean;
declare export function isPromise<A>(value: A | Promise<mixed>): boolean;
declare export function isArray<A>(value: A | $ReadOnlyArray<mixed>): boolean;
declare export function isObject<A>(value: A | { [key: string]: any }): boolean;
declare export function isFunction<A>(value: A | Function): boolean;
declare export function isError<A>(value: A | Error): boolean;
declare export function isDate<A>(value: A): boolean;
declare export function isNullable<A>(value: A): boolean;
declare export function isNotNullable<A>(value: A): boolean;
declare export function isNull<A>(value: A | null | void): boolean;
declare export function isUndefined<A>(value: A | null | void): boolean;
declare export function isNot<A, B: A>(
  value: A,
  predicateFn: (value: A) => boolean
): boolean;
declare export function isNot<A, B: A>(
  predicateFn: (value: A) => boolean
): (value: A) => boolean;
declare export function isNot<A>(
  value: A,
  predicateFn: (value: A) => any
): boolean;
declare export function isNot<A>(
  predicateFn: (value: A) => any
): (value: A) => boolean;
