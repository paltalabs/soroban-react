{"version":3,"file":"index.min.js","mappings":"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","sources":["webpack://lobstrExtensionApi/webpack/universalModuleDefinition","webpack://lobstrExtensionApi/webpack/bootstrap","webpack://lobstrExtensionApi/./src/Users/egorlukashev/WebstormProjects/lobstr-signer-extension/@shared/constants/services.ts","webpack://lobstrExtensionApi/webpack/runtime/define property getters","webpack://lobstrExtensionApi/webpack/runtime/hasOwnProperty shorthand","webpack://lobstrExtensionApi/webpack/runtime/make namespace object","webpack://lobstrExtensionApi/./src/Users/egorlukashev/WebstormProjects/lobstr-signer-extension/@shared/api/helpers/extensionMessaging.ts","webpack://lobstrExtensionApi/./src/Users/egorlukashev/WebstormProjects/lobstr-signer-extension/@lobstrco/signer-extension-api/src/getPublicKey.ts","webpack://lobstrExtensionApi/./src/Users/egorlukashev/WebstormProjects/lobstr-signer-extension/@shared/api/external.ts","webpack://lobstrExtensionApi/./src/Users/egorlukashev/WebstormProjects/lobstr-signer-extension/@lobstrco/signer-extension-api/src/signTransaction.ts","webpack://lobstrExtensionApi/./src/Users/egorlukashev/WebstormProjects/lobstr-signer-extension/@lobstrco/signer-extension-api/src/isConnected.ts","webpack://lobstrExtensionApi/./src/Users/egorlukashev/WebstormProjects/lobstr-signer-extension/@lobstrco/signer-extension-api/src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lobstrExtensionApi\"] = factory();\n\telse\n\t\troot[\"lobstrExtensionApi\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","export enum SERVICE_TYPES {\n  LOAD_STATE = \"LOAD_STATE\",\n  LOGIN = \"LOGIN\",\n  LOGOUT = \"LOGOUT\",\n  SIGN_TRANSACTION = \"SIGN_TRANSACTION\",\n  REJECT_TRANSACTION = \"REJECT_TRANSACTION\",\n  GRANT_ACCESS = \"GRANT_ACCESS\",\n  REJECT_ACCESS = \"REJECT_ACCESS\",\n}\n\nexport enum EXTERNAL_SERVICE_TYPES {\n  REQUEST_ACCESS = \"REQUEST_ACCESS\",\n  SIGN_TRANSACTION = \"SUBMIT_TRANSACTION\",\n  REQUEST_CONNECTION_STATUS = \"REQUEST_CONNECTION_STATUS\",\n}\n\nexport enum TX_STATUS {\n  pending = \"pending\",\n  signed = \"signed\",\n  rejected = \"rejected\",\n}\n\nexport const EXTERNAL_MSG_REQUEST = \"LOBSTR_EXTERNAL_MSG_REQUEST\";\nexport const EXTERNAL_MSG_RESPONSE = \"LOBSTR_EXTERNAL_MSG_RESPONSE\";\n\nexport const CONNECTION_KEY = \"LOBSTR_CONNECTION_KEY\";\n\ndeclare const DEV_SERVER: string;\nconst _DEV_SERVER = DEV_SERVER;\nexport { _DEV_SERVER as DEV_SERVER };\n\ndeclare const DEV_EXTENSION: string;\nconst _DEV_EXTENSION = DEV_EXTENSION;\nexport { _DEV_EXTENSION as DEV_EXTENSION };\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import browser from \"webextension-polyfill\";\nimport { Response } from \"@shared/constants/types\";\nimport {\n  DEV_SERVER,\n  EXTERNAL_MSG_RESPONSE,\n  EXTERNAL_MSG_REQUEST,\n  EXTERNAL_SERVICE_TYPES,\n  SERVICE_TYPES,\n} from \"../../constants/services\";\n\ninterface Msg {\n  [key: string]: any;\n  type: EXTERNAL_SERVICE_TYPES | SERVICE_TYPES;\n}\n\nexport const sendMessageToContentScript = (msg: Msg): Promise<any> => {\n  /* \n    In the case of multiple calls coming in sequentially, we use this MESSAGE_ID to make sure we're responding to\n    the appropriate message sender. Otherwise, we can run into race conditions where we simply resolve all \n    sent messages with the first thing that comes back.\n  */\n  const MESSAGE_ID = Date.now() + Math.random();\n\n  window.postMessage(\n    { source: EXTERNAL_MSG_REQUEST, messageId: MESSAGE_ID, ...msg },\n    window.location.origin,\n  );\n  return new Promise((resolve) => {\n    let requestTimeout: number | NodeJS.Timeout = 0;\n\n    /*\n      In the case that LOBSTR is not installed at all, any messages to\n      background from @lobstrco/signer-extension-api will hang forever and not respond in any way.\n      This is especially a problem for the isConnected method, because this is\n      likely to be called in a situation where LOBSTR isn't installed.\n      To prevent this, we add a timeout to automatically resolve in the event\n      LOBSTR doesn't respond in a timely fashion to this method.\n    */\n    if (msg.type === EXTERNAL_SERVICE_TYPES.REQUEST_CONNECTION_STATUS) {\n      requestTimeout = setTimeout(() => {\n        resolve({ isConnected: false });\n        window.removeEventListener(\"message\", messageListener);\n      }, 2000);\n    }\n\n    const messageListener = (event: { source: any; data: any }) => {\n      // We only accept messages from ourselves\n      if (event.source !== window) return;\n      // Only respond to messages tagged as being from our content script\n      if (event?.data?.source !== EXTERNAL_MSG_RESPONSE) return;\n      // Only respond to messages that this instance of sendMessageToContentScript sent\n      if (event?.data?.messagedId !== MESSAGE_ID) return;\n\n      resolve(event.data);\n      window.removeEventListener(\"message\", messageListener);\n      clearTimeout(requestTimeout);\n    };\n    window.addEventListener(\"message\", messageListener, false);\n  });\n};\n\nexport const sendMessageToBackground = async (msg: Msg): Promise<Response> => {\n  let res;\n  if (DEV_SERVER) {\n    // treat this as an external call because we're making the call from the browser, not the popup\n    res = await sendMessageToContentScript(msg);\n  } else {\n    res = await browser.runtime.sendMessage(msg);\n  }\n\n  return res;\n};\n","import { requestPublicKey } from \"@shared/api/external\";\nimport { GetPublicKeyResponse } from \"@shared/constants/types\";\nimport { CONNECTION_KEY } from \"@shared/constants/services\";\nimport { isBrowser } from \".\";\n\nconst saveConnectionKey = (connectionKey: string) => {\n  window?.sessionStorage?.setItem(CONNECTION_KEY, connectionKey);\n};\n\nexport const getPublicKey = async (): Promise<string> => {\n  if (!isBrowser) {\n    return \"\";\n  }\n\n  const { publicKey, connectionKey }: GetPublicKeyResponse =\n    await requestPublicKey();\n\n  saveConnectionKey(connectionKey);\n  return publicKey;\n};\n","import { GetPublicKeyResponse } from \"@shared/constants/types\";\nimport { EXTERNAL_SERVICE_TYPES } from \"../constants/services\";\nimport { sendMessageToContentScript } from \"./helpers/extensionMessaging\";\n\nexport const requestPublicKey = async (): Promise<GetPublicKeyResponse> => {\n  let response = { publicKey: \"\", error: \"\", connectionKey: \"\" };\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_ACCESS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  const { publicKey, connectionKey, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return { publicKey, connectionKey };\n};\n\nexport const signTransaction = async (\n  transactionXdr: string,\n  connectionKey: string,\n): Promise<string> => {\n  let response = { signedTransaction: \"\", error: \"\" };\n  try {\n    response = await sendMessageToContentScript({\n      transactionXdr,\n      connectionKey,\n      type: EXTERNAL_SERVICE_TYPES.SIGN_TRANSACTION,\n    });\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n  const { signedTransaction, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return signedTransaction;\n};\n\nexport const requestConnectionStatus = async (): Promise<boolean> => {\n  let response = {\n    isConnected: false,\n  };\n\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_CONNECTION_STATUS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response.isConnected;\n};\n","import { signTransaction as signTransactionService } from \"@shared/api/external\";\nimport { CONNECTION_KEY } from \"@shared/constants/services\";\nimport { isBrowser } from \"./index\";\n\nconst getConnectionKey = () =>\n  window?.sessionStorage?.getItem(CONNECTION_KEY) || \"\";\n\nexport const signTransaction = async (\n  transactionXdr: string,\n): Promise<string> => {\n  if (!isBrowser) {\n    return \"\";\n  }\n\n  const connectionKey = getConnectionKey();\n\n  return await signTransactionService(transactionXdr, connectionKey);\n};\n","import { requestConnectionStatus } from \"@shared/api/external\";\nimport { isBrowser } from \"./index\";\n\nexport const isConnected = async (): Promise<boolean> => {\n  if (!isBrowser) {\n    return false;\n  }\n\n  if (window.lobstrSignerExtension) {\n    return window.lobstrSignerExtension;\n  }\n\n  return await requestConnectionStatus();\n};\n","import { getPublicKey } from \"./getPublicKey\";\nimport { signTransaction } from \"./signTransaction\";\nimport { isConnected } from \"./isConnected\";\n\nexport const isBrowser = typeof window !== \"undefined\";\n\nexport { getPublicKey, signTransaction, isConnected };\nexport default {\n  getPublicKey,\n  signTransaction,\n  isConnected,\n};\n"],"names":["root","factory","exports","module","define","amd","this","SERVICE_TYPES","EXTERNAL_SERVICE_TYPES","TX_STATUS","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","CONNECTION_KEY","sendMessageToContentScript","msg","MESSAGE_ID","Date","now","Math","random","window","postMessage","source","messageId","location","origin","Promise","resolve","requestTimeout","type","REQUEST_CONNECTION_STATUS","setTimeout","isConnected","removeEventListener","messageListener","event","data","messagedId","clearTimeout","addEventListener","getPublicKey","async","isBrowser","publicKey","connectionKey","response","error","REQUEST_ACCESS","e","console","requestPublicKey","sessionStorage","setItem","saveConnectionKey","transactionXdr","getItem","signedTransaction","SIGN_TRANSACTION","signTransaction","lobstrSignerExtension","requestConnectionStatus"],"sourceRoot":""}