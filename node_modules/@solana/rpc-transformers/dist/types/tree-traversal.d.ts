import { RpcRequestTransformer, RpcResponseTransformer } from '@solana/rpc-spec-types';
export type KeyPathWildcard = {
    readonly __brand: unique symbol;
};
export type KeyPath = ReadonlyArray<KeyPath | KeyPathWildcard | number | string>;
export declare const KEYPATH_WILDCARD: KeyPathWildcard;
type NodeVisitor = <TState extends TraversalState>(value: unknown, state: TState) => unknown;
export type TraversalState = Readonly<{
    keyPath: KeyPath;
}>;
export declare function getTreeWalker(visitors: NodeVisitor[]): <TState extends TraversalState>(node: unknown, state: TState) => unknown;
export declare function getTreeWalkerRequestTransformer<TState extends TraversalState>(visitors: NodeVisitor[], initialState: TState): RpcRequestTransformer;
export declare function getTreeWalkerResponseTransformer<TState extends TraversalState>(visitors: NodeVisitor[], initialState: TState): RpcResponseTransformer;
export {};
//# sourceMappingURL=tree-traversal.d.ts.map