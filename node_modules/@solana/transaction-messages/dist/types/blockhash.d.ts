import { type Blockhash } from '@solana/rpc-types';
import { TransactionMessageWithDurableNonceLifetime } from './durable-nonce';
import { BaseTransactionMessage } from './transaction-message';
type BlockhashLifetimeConstraint = Readonly<{
    blockhash: Blockhash;
    lastValidBlockHeight: bigint;
}>;
export interface TransactionMessageWithBlockhashLifetime {
    readonly lifetimeConstraint: BlockhashLifetimeConstraint;
}
export declare function isTransactionMessageWithBlockhashLifetime(transaction: BaseTransactionMessage | (BaseTransactionMessage & TransactionMessageWithBlockhashLifetime)): transaction is BaseTransactionMessage & TransactionMessageWithBlockhashLifetime;
export declare function assertIsTransactionMessageWithBlockhashLifetime(transaction: BaseTransactionMessage | (BaseTransactionMessage & TransactionMessageWithBlockhashLifetime)): asserts transaction is BaseTransactionMessage & TransactionMessageWithBlockhashLifetime;
export declare function setTransactionMessageLifetimeUsingBlockhash<TTransaction extends BaseTransactionMessage & TransactionMessageWithDurableNonceLifetime>(blockhashLifetimeConstraint: BlockhashLifetimeConstraint, transaction: TTransaction): Omit<TTransaction, 'lifetimeConstraint'> & TransactionMessageWithBlockhashLifetime;
export declare function setTransactionMessageLifetimeUsingBlockhash<TTransaction extends BaseTransactionMessage | (BaseTransactionMessage & TransactionMessageWithBlockhashLifetime)>(blockhashLifetimeConstraint: BlockhashLifetimeConstraint, transaction: TTransaction): TransactionMessageWithBlockhashLifetime & TTransaction;
export {};
//# sourceMappingURL=blockhash.d.ts.map