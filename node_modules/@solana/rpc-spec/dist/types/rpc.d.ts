import { Callable, Flatten, OverloadImplementations, UnionToIntersection } from '@solana/rpc-spec-types';
import { RpcApi } from './rpc-api';
import { RpcTransport } from './rpc-transport';
export type RpcConfig<TRpcMethods, TRpcTransport extends RpcTransport> = Readonly<{
    api: RpcApi<TRpcMethods>;
    transport: TRpcTransport;
}>;
export type Rpc<TRpcMethods> = {
    [TMethodName in keyof TRpcMethods]: PendingRpcRequestBuilder<OverloadImplementations<TRpcMethods, TMethodName>>;
};
export type PendingRpcRequest<TResponse> = {
    send(options?: RpcSendOptions): Promise<TResponse>;
};
export type RpcSendOptions = Readonly<{
    abortSignal?: AbortSignal;
}>;
type PendingRpcRequestBuilder<TMethodImplementations> = UnionToIntersection<Flatten<{
    [P in keyof TMethodImplementations]: PendingRpcRequestReturnTypeMapper<TMethodImplementations[P]>;
}>>;
type PendingRpcRequestReturnTypeMapper<TMethodImplementation> = TMethodImplementation extends Callable ? (...args: Parameters<TMethodImplementation>) => PendingRpcRequest<ReturnType<TMethodImplementation>> : never;
export declare function createRpc<TRpcMethods, TRpcTransport extends RpcTransport>(rpcConfig: RpcConfig<TRpcMethods, TRpcTransport>): Rpc<TRpcMethods>;
export {};
//# sourceMappingURL=rpc.d.ts.map