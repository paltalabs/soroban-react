import type { ReadonlyUint8Array } from '@solana/codecs-core';
import { Address } from './address';
/**
 * An address derived from a program address and a set of seeds.
 * It includes the bump seed used to derive the address and
 * ensure the address is not on the Ed25519 curve.
 */
export type ProgramDerivedAddress<TAddress extends string = string> = Readonly<[
    Address<TAddress>,
    ProgramDerivedAddressBump
]>;
/**
 * A number between 0 and 255, inclusive.
 */
export type ProgramDerivedAddressBump = number & {
    readonly __brand: unique symbol;
};
/**
 * Returns true if the input value is a program derived address.
 */
export declare function isProgramDerivedAddress<TAddress extends string = string>(value: unknown): value is ProgramDerivedAddress<TAddress>;
/**
 * Fails if the input value is not a program derived address.
 */
export declare function assertIsProgramDerivedAddress<TAddress extends string = string>(value: unknown): asserts value is ProgramDerivedAddress<TAddress>;
type ProgramDerivedAddressInput = Readonly<{
    programAddress: Address;
    seeds: Seed[];
}>;
type SeedInput = Readonly<{
    baseAddress: Address;
    programAddress: Address;
    seed: Seed;
}>;
type Seed = ReadonlyUint8Array | string;
export declare function getProgramDerivedAddress({ programAddress, seeds, }: ProgramDerivedAddressInput): Promise<ProgramDerivedAddress>;
export declare function createAddressWithSeed({ baseAddress, programAddress, seed }: SeedInput): Promise<Address>;
export {};
//# sourceMappingURL=program-derived-address.d.ts.map