import { SignatureBytes } from '@solana/keys';
import { CompilableTransactionMessage, TransactionMessageWithBlockhashLifetime, TransactionMessageWithDurableNonceLifetime } from '@solana/transaction-messages';
import { FullySignedTransaction, Transaction, TransactionWithBlockhashLifetime, TransactionWithDurableNonceLifetime, TransactionWithLifetime } from '@solana/transactions';
import { ITransactionMessageWithSigners } from './account-signer-meta';
import { TransactionPartialSignerConfig } from './transaction-partial-signer';
import { TransactionSendingSignerConfig } from './transaction-sending-signer';
type CompilableTransactionMessageWithSigners = CompilableTransactionMessage & ITransactionMessageWithSigners;
/**
 * Signs a transaction using any signers that may be stored in IAccountSignerMeta instruction accounts
 * as well as any signers provided explicitly to this function.
 * It will ignore TransactionSendingSigners since this function does not send the transaction.
 */
export declare function partiallySignTransactionMessageWithSigners<TTransactionMessage extends CompilableTransactionMessageWithSigners & TransactionMessageWithBlockhashLifetime = CompilableTransactionMessageWithSigners & TransactionMessageWithBlockhashLifetime>(transactionMessage: TTransactionMessage, config?: TransactionPartialSignerConfig): Promise<Transaction & TransactionWithBlockhashLifetime>;
export declare function partiallySignTransactionMessageWithSigners<TTransactionMessage extends CompilableTransactionMessageWithSigners & TransactionMessageWithDurableNonceLifetime = CompilableTransactionMessageWithSigners & TransactionMessageWithDurableNonceLifetime>(transactionMessage: TTransactionMessage, config?: TransactionPartialSignerConfig): Promise<Readonly<Transaction & TransactionWithDurableNonceLifetime>>;
export declare function partiallySignTransactionMessageWithSigners<TTransactionMessage extends CompilableTransactionMessageWithSigners = CompilableTransactionMessageWithSigners>(transactionMessage: TTransactionMessage, config?: TransactionPartialSignerConfig): Promise<Readonly<Transaction & TransactionWithLifetime>>;
/**
 * Signs a transaction using any signers that may be stored in IAccountSignerMeta instruction accounts
 * as well as any signers provided explicitly to this function.
 * It will assert that the transaction is fully signed before returning.
 * It will ignore TransactionSendingSigners since this function does not send the transaction.
 */
export declare function signTransactionMessageWithSigners<TTransactionMessage extends CompilableTransactionMessageWithSigners & TransactionMessageWithBlockhashLifetime = CompilableTransactionMessageWithSigners & TransactionMessageWithBlockhashLifetime>(transactionMessage: TTransactionMessage, config?: TransactionPartialSignerConfig): Promise<Readonly<FullySignedTransaction & TransactionWithBlockhashLifetime>>;
export declare function signTransactionMessageWithSigners<TTransactionMessage extends CompilableTransactionMessageWithSigners & TransactionMessageWithDurableNonceLifetime = CompilableTransactionMessageWithSigners & TransactionMessageWithDurableNonceLifetime>(transactionMessage: TTransactionMessage, config?: TransactionPartialSignerConfig): Promise<Readonly<FullySignedTransaction & TransactionWithDurableNonceLifetime>>;
export declare function signTransactionMessageWithSigners<TTransactionMessage extends CompilableTransactionMessageWithSigners = CompilableTransactionMessageWithSigners>(transactionMessage: TTransactionMessage, config?: TransactionPartialSignerConfig): Promise<Readonly<FullySignedTransaction & TransactionWithLifetime>>;
/**
 * Signs and sends a transaction using any signers that may be stored in IAccountSignerMeta
 * instruction accounts as well as any signers provided explicitly to this function.
 * It will identify a single TransactionSendingSigners to use for sending the transaction, if any.
 * Otherwise, it will send the transaction using the provided fallbackSender.
 */
export declare function signAndSendTransactionMessageWithSigners<TTransactionMessage extends CompilableTransactionMessageWithSigners = CompilableTransactionMessageWithSigners>(transaction: TTransactionMessage, config?: TransactionSendingSignerConfig): Promise<SignatureBytes>;
export {};
//# sourceMappingURL=sign-transaction.d.ts.map