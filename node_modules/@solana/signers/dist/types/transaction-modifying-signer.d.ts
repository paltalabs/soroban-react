import { Address } from '@solana/addresses';
import { Transaction } from '@solana/transactions';
import { BaseTransactionSignerConfig } from './types';
export type TransactionModifyingSignerConfig = BaseTransactionSignerConfig;
/** Defines a signer capable of signing transactions. */
export type TransactionModifyingSigner<TAddress extends string = string> = Readonly<{
    address: Address<TAddress>;
    modifyAndSignTransactions<T extends Transaction>(transactions: readonly T[], config?: TransactionModifyingSignerConfig): Promise<readonly T[]>;
}>;
/** Checks whether the provided value implements the {@link TransactionModifyingSigner} interface. */
export declare function isTransactionModifyingSigner<TAddress extends string>(value: {
    [key: string]: unknown;
    address: Address<TAddress>;
}): value is TransactionModifyingSigner<TAddress>;
/** Asserts that the provided value implements the {@link TransactionModifyingSigner} interface. */
export declare function assertIsTransactionModifyingSigner<TAddress extends string>(value: {
    [key: string]: unknown;
    address: Address<TAddress>;
}): asserts value is TransactionModifyingSigner<TAddress>;
//# sourceMappingURL=transaction-modifying-signer.d.ts.map