import { type FetchAccountConfig } from '@solana/accounts';
import { type VariableSizeCodec, type VariableSizeDecoder, type VariableSizeEncoder } from '@solana/codecs';
import type { GetAccountInfoApi } from '@solana/rpc-api';
import type { Rpc } from '@solana/rpc-spec';
import { type Blockhash, type Lamports } from '@solana/rpc-types';
type FeeCalculator = Readonly<{
    lamportsPerSignature: Lamports;
}>;
type Entry = Readonly<{
    blockhash: Blockhash;
    feeCalculator: FeeCalculator;
}>;
/**
 * The `RecentBlockhashes` sysvar.
 *
 * Information about recent blocks and their fee calculators.
 */
export type SysvarRecentBlockhashes = Entry[];
export declare function getSysvarRecentBlockhashesEncoder(): VariableSizeEncoder<SysvarRecentBlockhashes>;
export declare function getSysvarRecentBlockhashesDecoder(): VariableSizeDecoder<SysvarRecentBlockhashes>;
export declare function getSysvarRecentBlockhashesCodec(): VariableSizeCodec<SysvarRecentBlockhashes>;
/**
 * Fetch the `RecentBlockhashes` sysvar.
 *
 * Information about recent blocks and their fee calculators.
 */
export declare function fetchSysvarRecentBlockhashes(rpc: Rpc<GetAccountInfoApi>, config?: FetchAccountConfig): Promise<SysvarRecentBlockhashes>;
export {};
//# sourceMappingURL=recent-blockhashes.d.ts.map