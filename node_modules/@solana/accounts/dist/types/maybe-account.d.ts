import { Address } from '@solana/addresses';
import { Account } from './account';
/** Defines a Solana account that may or may not exist after having tried to fetch it. */
export type MaybeAccount<TData extends Uint8Array | object, TAddress extends string = string> = {
    readonly address: Address<TAddress>;
    readonly exists: false;
} | (Account<TData, TAddress> & {
    readonly exists: true;
});
/** Defines a Solana account with encoded data that may or may not exist after having tried to fetch it. */
export type MaybeEncodedAccount<TAddress extends string = string> = MaybeAccount<Uint8Array, TAddress>;
/** Asserts that an account that may or may not exists, actually exists. */
export declare function assertAccountExists<TData extends Uint8Array | object, TAddress extends string = string>(account: MaybeAccount<TData, TAddress>): asserts account is Account<TData, TAddress> & {
    exists: true;
};
/** Asserts that all accounts that may or may not exist, actually all exist. */
export declare function assertAccountsExist<TData extends Uint8Array | object, TAddress extends string = string>(accounts: MaybeAccount<TData, TAddress>[]): asserts accounts is (Account<TData, TAddress> & {
    exists: true;
})[];
//# sourceMappingURL=maybe-account.d.ts.map