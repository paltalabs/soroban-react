import type { Signature } from '@solana/keys';
import type { Commitment, SolanaRpcResponse, TransactionError } from '@solana/rpc-types';
type SignatureNotificationsApiNotificationReceived = SolanaRpcResponse<Readonly<string>>;
type SignatureNotificationsApiNotificationProcessed = SolanaRpcResponse<Readonly<{
    err: TransactionError | null;
}>>;
type SignatureNotificationsApiConfigBase = Readonly<{
    commitment?: Commitment;
}>;
export type SignatureNotificationsApi = {
    /**
     * Subscribe to a transaction signature to receive notification when a given transaction is committed.
     * On `signatureNotification` - the subscription is automatically cancelled.
     * The signature must be a txid, the first signature of a transaction.
     */
    signatureNotifications(signature: Signature, config: Readonly<{
        enableReceivedNotification: true;
    }> & SignatureNotificationsApiConfigBase): SignatureNotificationsApiNotificationProcessed | SignatureNotificationsApiNotificationReceived;
    signatureNotifications(signature: Signature, config?: Readonly<{
        enableReceivedNotification?: false;
    }> & SignatureNotificationsApiConfigBase): SignatureNotificationsApiNotificationProcessed;
};
export {};
//# sourceMappingURL=signature-notifications.d.ts.map