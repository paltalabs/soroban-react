{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAAA,IAAM,WAAA,GAAc,OAAO,SAAU,CAAA,QAAA,CAAA;AACrC,IAAM,OACF,GAAA,MAAA,CAAO,IACP,IAAA,SAAU,GAAK,EAAA;AACX,EAAA,MAAM,OAAO,EAAC,CAAA;AACd,EAAA,KAAA,MAAW,QAAQ,GAAK,EAAA;AACpB,IAAA,IAAA,CAAK,KAAK,IAAI,CAAA,CAAA;AAAA,GAClB;AACA,EAAO,OAAA,IAAA,CAAA;AACX,CAAA,CAAA;AAEJ,SAAS,SAAA,CAAU,KAAc,WAAsB,EAAA;AACnD,EAAA,IAAI,CAAG,EAAA,GAAA,EAAK,GAAK,EAAA,IAAA,EAAM,KAAK,OAAS,EAAA,KAAA,CAAA;AACrC,EAAA,IAAI,QAAQ,IAAM,EAAA;AACd,IAAO,OAAA,MAAA,CAAA;AAAA,GACX;AACA,EAAA,IAAI,QAAQ,KAAO,EAAA;AACf,IAAO,OAAA,OAAA,CAAA;AAAA,GACX;AACA,EAAA,QAAQ,OAAO,GAAK;AAAA,IAChB,KAAK,QAAA;AACD,MAAA,IAAI,QAAQ,IAAM,EAAA;AACd,QAAO,OAAA,IAAA,CAAA;AAAA,iBACA,QAAY,IAAA,GAAA,IAAO,OAAO,GAAA,CAAI,WAAW,UAAY,EAAA;AAC5D,QAAA,OAAO,SAAU,CAAA,GAAA,CAAI,MAAO,EAAA,EAAG,WAAW,CAAA,CAAA;AAAA,OACvC,MAAA;AACH,QAAQ,KAAA,GAAA,WAAA,CAAY,KAAK,GAAG,CAAA,CAAA;AAC5B,QAAA,IAAI,UAAU,gBAAkB,EAAA;AAC5B,UAAM,GAAA,GAAA,GAAA,CAAA;AACN,UAAA,GAAA,GAAO,IAAkB,MAAS,GAAA,CAAA,CAAA;AAClC,UAAA,KAAK,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,EAAK,CAAK,EAAA,EAAA;AACtB,YAAA,GAAA,IAAO,SAAW,CAAA,GAAA,CAAkB,CAAC,CAAA,EAAG,IAAI,CAAI,GAAA,GAAA,CAAA;AAAA,WACpD;AACA,UAAA,IAAI,MAAM,CAAI,CAAA,EAAA;AACV,YAAA,GAAA,IAAO,SAAW,CAAA,GAAA,CAAkB,CAAC,CAAA,EAAG,IAAI,CAAA,CAAA;AAAA,WAChD;AACA,UAAA,OAAO,GAAM,GAAA,GAAA,CAAA;AAAA,SACjB,MAAA,IAAW,UAAU,iBAAmB,EAAA;AAEpC,UAAO,IAAA,GAAA,OAAA,CAAQ,GAAG,CAAA,CAAE,IAAK,EAAA,CAAA;AACzB,UAAA,GAAA,GAAM,IAAK,CAAA,MAAA,CAAA;AACX,UAAM,GAAA,GAAA,EAAA,CAAA;AACN,UAAI,CAAA,GAAA,CAAA,CAAA;AACJ,UAAA,OAAO,IAAI,GAAK,EAAA;AACZ,YAAA,GAAA,GAAM,KAAK,CAAC,CAAA,CAAA;AACZ,YAAA,OAAA,GAAU,SAAW,CAAA,GAAA,CAAoC,GAAG,CAAA,EAAG,KAAK,CAAA,CAAA;AACpE,YAAA,IAAI,YAAY,KAAW,CAAA,EAAA;AACvB,cAAA,IAAI,GAAK,EAAA;AACL,gBAAO,GAAA,IAAA,GAAA,CAAA;AAAA,eACX;AACA,cAAA,GAAA,IAAO,IAAK,CAAA,SAAA,CAAU,GAAG,CAAA,GAAI,GAAM,GAAA,OAAA,CAAA;AAAA,aACvC;AACA,YAAA,CAAA,EAAA,CAAA;AAAA,WACJ;AACA,UAAA,OAAO,MAAM,GAAM,GAAA,GAAA,CAAA;AAAA,SAChB,MAAA;AACH,UAAO,OAAA,IAAA,CAAK,UAAU,GAAG,CAAA,CAAA;AAAA,SAC7B;AAAA,OACJ;AAAA,IACJ,KAAK,UAAA,CAAA;AAAA,IACL,KAAK,WAAA;AACD,MAAA,OAAO,cAAc,IAAO,GAAA,KAAA,CAAA,CAAA;AAAA,IAChC,KAAK,QAAA;AACD,MAAO,OAAA,CAAA,EAAG,GAAI,CAAA,QAAA,EAAU,CAAA,CAAA,CAAA,CAAA;AAAA,IAC5B,KAAK,QAAA;AACD,MAAO,OAAA,IAAA,CAAK,UAAU,GAAG,CAAA,CAAA;AAAA,IAC7B;AACI,MAAO,OAAA,QAAA,CAAS,GAAa,CAAA,GAAI,GAAM,GAAA,IAAA,CAAA;AAAA,GAC/C;AACJ,CAAA;AAQe,SAAR,YAAkB,GAAkC,EAAA;AACvD,EAAM,MAAA,SAAA,GAAY,SAAU,CAAA,GAAA,EAAK,KAAK,CAAA,CAAA;AACtC,EAAA,IAAI,cAAc,KAAW,CAAA,EAAA;AACzB,IAAA,OAAO,EAAK,GAAA,SAAA,CAAA;AAAA,GAChB;AACJ","file":"index.browser.mjs","sourcesContent":["const objToString = Object.prototype.toString;\nconst objKeys =\n    Object.keys ||\n    function (obj) {\n        const keys = [];\n        for (const name in obj) {\n            keys.push(name);\n        }\n        return keys;\n    };\n\nfunction stringify(val: unknown, isArrayProp: boolean) {\n    let i, max, str, keys, key, propVal, toStr;\n    if (val === true) {\n        return 'true';\n    }\n    if (val === false) {\n        return 'false';\n    }\n    switch (typeof val) {\n        case 'object':\n            if (val === null) {\n                return null;\n            } else if ('toJSON' in val && typeof val.toJSON === 'function') {\n                return stringify(val.toJSON(), isArrayProp);\n            } else {\n                toStr = objToString.call(val);\n                if (toStr === '[object Array]') {\n                    str = '[';\n                    max = (val as unknown[]).length - 1;\n                    for (i = 0; i < max; i++) {\n                        str += stringify((val as unknown[])[i], true) + ',';\n                    }\n                    if (max > -1) {\n                        str += stringify((val as unknown[])[i], true);\n                    }\n                    return str + ']';\n                } else if (toStr === '[object Object]') {\n                    // only object is left\n                    keys = objKeys(val).sort();\n                    max = keys.length;\n                    str = '';\n                    i = 0;\n                    while (i < max) {\n                        key = keys[i];\n                        propVal = stringify((val as Record<typeof key, unknown>)[key], false);\n                        if (propVal !== undefined) {\n                            if (str) {\n                                str += ',';\n                            }\n                            str += JSON.stringify(key) + ':' + propVal;\n                        }\n                        i++;\n                    }\n                    return '{' + str + '}';\n                } else {\n                    return JSON.stringify(val);\n                }\n            }\n        case 'function':\n        case 'undefined':\n            return isArrayProp ? null : undefined;\n        case 'bigint':\n            return `${val.toString()}n`;\n        case 'string':\n            return JSON.stringify(val);\n        default:\n            return isFinite(val as number) ? val : null;\n    }\n}\n\nexport default function (\n    val:\n        | Function // eslint-disable-line @typescript-eslint/no-unsafe-function-type\n        | undefined,\n): undefined;\nexport default function (val: unknown): string;\nexport default function (val: unknown): string | undefined {\n    const returnVal = stringify(val, false);\n    if (returnVal !== undefined) {\n        return '' + returnVal;\n    }\n}\n"]}