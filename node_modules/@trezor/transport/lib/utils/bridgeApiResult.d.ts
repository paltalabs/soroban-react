import type { Descriptor, Session } from '../types';
type UnknownPayload = string | Record<string, unknown>;
export declare function info(res: UnknownPayload): {
    success: false;
    error: "Wrong result type.";
    message: string | undefined;
} | import("../types").Success<{
    version: string;
    configured: boolean;
    protocolMessages: boolean;
}>;
export declare function version(res: UnknownPayload): {
    success: false;
    error: "Wrong result type.";
    message: string | undefined;
} | import("../types").Success<string>;
export declare function devices(res: UnknownPayload): import("../types").Success<Descriptor[]> | {
    success: false;
    error: "Wrong result type.";
    message: string | undefined;
};
export declare function acquire(res: UnknownPayload): import("../types").Success<Session> | {
    success: false;
    error: "Wrong result type.";
    message: string | undefined;
};
export declare function call(res: UnknownPayload): {
    success: false;
    error: "Wrong result type.";
    message: string | undefined;
} | import("../types").Success<import("../types").BridgeProtocolMessage>;
export declare function post(res: UnknownPayload): {
    success: false;
    error: "Wrong result type.";
    message: string | undefined;
} | import("../types").Success<import("../types").BridgeProtocolMessage>;
export declare function empty(res: UnknownPayload): import("../types").Success<undefined> | {
    success: false;
    error: "Wrong result type.";
    message: string | undefined;
};
export {};
//# sourceMappingURL=bridgeApiResult.d.ts.map