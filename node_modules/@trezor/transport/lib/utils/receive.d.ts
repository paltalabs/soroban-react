import { Root } from 'protobufjs/light';
import { TransportProtocol } from '@trezor/protocol';
import { AbstractApi } from '../api/abstract';
export declare function receive<T extends () => ReturnType<AbstractApi['read']>>(receiver: T, protocol: TransportProtocol): Promise<import("../types").ErrorGeneric<"Unable to open device" | "A transfer error has occurred." | "device not found" | "device disconnected during action" | "unexpected error" | "Aborted by signal" | "Aborted by timeout"> | import("../types").Success<{
    messageType: string | number;
    payload: Buffer;
}>>;
export declare function receiveAndParse<T extends () => ReturnType<AbstractApi['read']>>(messages: Root, receiver: T, protocol: TransportProtocol): Promise<import("../types").ErrorGeneric<"Unable to open device" | "A transfer error has occurred." | "device not found" | "device disconnected during action" | "unexpected error" | "Aborted by signal" | "Aborted by timeout"> | import("../types").Success<{
    message: {
        [key: string]: any;
    };
    type: keyof import("@trezor/protobuf/lib/messages").MessageType;
}>>;
//# sourceMappingURL=receive.d.ts.map