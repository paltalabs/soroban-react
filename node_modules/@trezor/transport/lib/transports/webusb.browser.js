"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebUsbTransport = void 0;
const tslib_1 = require("tslib");
const abstractApi_1 = require("./abstractApi");
const usb_1 = require("../api/usb");
const background_browser_1 = require("../sessions/background-browser");
const defaultSessionsBackgroundUrl = 'https://connect.trezor.io/9/workers/sessions-background-sharedworker.js';
class WebUsbTransport extends abstractApi_1.AbstractApiTransport {
    constructor(_a) {
        var { logger, sessionsBackgroundUrl } = _a, rest = tslib_1.__rest(_a, ["logger", "sessionsBackgroundUrl"]);
        super(Object.assign({ api: new usb_1.UsbApi({ usbInterface: navigator.usb, logger }), logger }, rest));
        this.name = 'WebUsbTransport';
        this.apiType = 'usb';
        this.sessionsBackgroundUrl = defaultSessionsBackgroundUrl;
        if (sessionsBackgroundUrl || sessionsBackgroundUrl === null) {
            this.sessionsBackgroundUrl = sessionsBackgroundUrl;
        }
    }
    trySetSessionsBackground() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!this.sessionsBackgroundUrl) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log('No sessionsBackgroundUrl provided. Falling back to use local module.');
                return;
            }
            try {
                const response = yield fetch(this.sessionsBackgroundUrl, { method: 'HEAD' });
                if (!response.ok) {
                    console.warn(`Failed to fetch sessions-background SharedWorker from url: ${this.sessionsBackgroundUrl}`);
                }
                else {
                    this.sessionsBackground = new background_browser_1.BrowserSessionsBackground(this.sessionsBackgroundUrl);
                    this.sessionsClient.setBackground(this.sessionsBackground);
                }
            }
            catch (err) {
                console.warn('Unable to load background-sharedworker. Falling back to use local module. Say bye bye to tabs synchronization. Error details: ', err.message);
            }
        });
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ signal } = {}) {
            yield this.trySetSessionsBackground();
            return _super.init.call(this, { signal });
        });
    }
}
exports.WebUsbTransport = WebUsbTransport;
//# sourceMappingURL=webusb.browser.js.map