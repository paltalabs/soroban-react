"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsbApi = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("@trezor/utils");
const abstract_1 = require("./abstract");
const types_1 = require("../types");
const constants_1 = require("../constants");
const ERRORS = tslib_1.__importStar(require("../errors"));
class UsbApi extends abstract_1.AbstractApi {
    constructor({ usbInterface, logger, forceReadSerialOnConnect, debugLink }) {
        super({ logger });
        this.chunkSize = 64;
        this.devices = [];
        this.abortController = new AbortController();
        this.synchronizeCreateDevices = (0, utils_1.getSynchronize)();
        this.usbInterface = usbInterface;
        this.forceReadSerialOnConnect = forceReadSerialOnConnect;
        this.debugLink = debugLink;
    }
    listen() {
        this.usbInterface.onconnect = event => {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: onconnect: ${this.formatDeviceForLog(event.device)}`);
            return this.createDevices([event.device], this.abortController.signal)
                .then(newDevices => {
                this.devices = [...this.devices, ...newDevices];
                this.emit('transport-interface-change', this.devicesToDescriptors());
            })
                .catch(err => {
                var _a;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(`usb: createDevices error: ${err.message}`);
            });
        };
        this.usbInterface.ondisconnect = event => {
            var _a, _b;
            const { device } = event;
            if (!device.serialNumber) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: ondisconnect: device without serial number:, ${device.productName}, ${device.manufacturerName}`);
                return;
            }
            const index = this.devices.findIndex(d => d.path === device.serialNumber);
            if (index > -1) {
                this.devices.splice(index, 1);
                this.emit('transport-interface-change', this.devicesToDescriptors());
            }
            else {
                this.emit('transport-interface-error', ERRORS.DEVICE_NOT_FOUND);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.error('usb: device that should be removed does not exist in state');
            }
        };
    }
    formatDeviceForLog(device) {
        return JSON.stringify({
            productName: device.productName,
            manufacturerName: device.manufacturerName,
            serialNumber: device.serialNumber,
            vendorId: device.vendorId,
            productId: device.productId,
            deviceVersionMajor: device.deviceVersionMajor,
            deviceVersionMinor: device.deviceVersionMinor,
            opened: device.opened,
        });
    }
    matchDeviceType(device) {
        const isBootloader = device.productId === constants_1.WEBUSB_BOOTLOADER_PRODUCT;
        if (device.deviceVersionMajor === 2) {
            if (isBootloader) {
                return abstract_1.DEVICE_TYPE.TypeT2Boot;
            }
            else {
                return abstract_1.DEVICE_TYPE.TypeT2;
            }
        }
        else {
            if (isBootloader) {
                return abstract_1.DEVICE_TYPE.TypeT1WebusbBoot;
            }
            else if (device.vendorId === constants_1.T1_HID_VENDOR && device.productId === constants_1.T1_HID_PRODUCT) {
                return abstract_1.DEVICE_TYPE.TypeT1Hid;
            }
            else {
                return abstract_1.DEVICE_TYPE.TypeT1Webusb;
            }
        }
    }
    devicesToDescriptors() {
        return this.devices.map(d => ({
            path: (0, types_1.PathInternal)(d.path),
            type: this.matchDeviceType(d.device),
            product: d.device.productId,
            vendor: d.device.vendorId,
        }));
    }
    abortableMethod(method, { signal, onAbort }) {
        if (!signal) {
            return method();
        }
        if (signal.aborted) {
            return Promise.reject(new Error(ERRORS.ABORTED_BY_SIGNAL));
        }
        const dfd = (0, utils_1.createDeferred)();
        const abortListener = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('usb: abortableMethod onAbort start');
            try {
                yield (onAbort === null || onAbort === void 0 ? void 0 : onAbort());
            }
            catch (_c) {
            }
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug('usb: abortableMethod onAbort done');
            dfd.reject(new Error(ERRORS.ABORTED_BY_SIGNAL));
        });
        signal === null || signal === void 0 ? void 0 : signal.addEventListener('abort', abortListener);
        const methodPromise = method().catch(error => {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: abortableMethod method() aborted: ${signal.aborted} ${error}`);
            if (signal.aborted) {
                return dfd.promise;
            }
            dfd.reject(error);
            throw error;
        });
        return Promise.race([methodPromise, dfd.promise])
            .then(r => {
            dfd.resolve(r);
            return r;
        })
            .finally(() => {
            signal === null || signal === void 0 ? void 0 : signal.removeEventListener('abort', abortListener);
        });
    }
    enumerate(signal) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('usb: enumerate');
                const devices = yield this.abortableMethod(() => this.usbInterface.getDevices(), {
                    signal,
                });
                this.devices = yield this.createDevices(devices, signal);
                return this.success(this.devicesToDescriptors());
            }
            catch (err) {
                return this.unknownError(err);
            }
        });
    }
    read(path, signal) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e;
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            try {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('usb: device.transferIn');
                const res = yield this.abortableMethod(() => device.transferIn(this.debugLink ? constants_1.DEBUGLINK_ENDPOINT_ID : constants_1.ENDPOINT_ID, this.chunkSize), { signal, onAbort: () => device === null || device === void 0 ? void 0 : device.reset() });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`usb: device.transferIn done. status: ${res.status}, byteLength: ${(_c = res.data) === null || _c === void 0 ? void 0 : _c.byteLength}.`);
                if (!((_d = res.data) === null || _d === void 0 ? void 0 : _d.byteLength)) {
                    return this.error({ error: ERRORS.INTERFACE_DATA_TRANSFER });
                }
                return this.success(Buffer.from(res.data.buffer));
            }
            catch (err) {
                (_e = this.logger) === null || _e === void 0 ? void 0 : _e.error(`usb: device.transferIn error ${err}`);
                return this.handleReadWriteError(err);
            }
        });
    }
    write(path, buffer, signal) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            const newArray = new Uint8Array(this.chunkSize);
            newArray.set(new Uint8Array(buffer));
            try {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('usb: device.transferOut');
                const result = yield this.abortableMethod(() => device.transferOut(this.debugLink ? constants_1.DEBUGLINK_ENDPOINT_ID : constants_1.ENDPOINT_ID, newArray), { signal, onAbort: () => device === null || device === void 0 ? void 0 : device.reset() });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`usb: device.transferOut done.`);
                if (result.status !== 'ok') {
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(`usb: device.transferOut status not ok: ${result.status}`);
                    throw new Error('transfer out status not ok');
                }
                return this.success(undefined);
            }
            catch (err) {
                return this.handleReadWriteError(err);
            }
        });
    }
    openDevice(path, first, signal) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            for (let i = 0; i < 5; i++) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: openDevice attempt ${i}`);
                const res = yield this.openInternal(path, first, signal);
                if (res.success || (signal === null || signal === void 0 ? void 0 : signal.aborted)) {
                    return res;
                }
                yield (0, utils_1.createTimeoutPromise)(100 * i);
            }
            return this.openInternal(path, first, signal);
        });
    }
    openInternal(path, first, signal) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            try {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: device.open`);
                yield this.abortableMethod(() => device.open(), { signal });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`usb: device.open done. device: ${this.formatDeviceForLog(device)}`);
            }
            catch (err) {
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(`usb: device.open error ${err}`);
                if (err.message.includes('LIBUSB_ERROR_ACCESS')) {
                    return this.error({ error: ERRORS.LIBUSB_ERROR_ACCESS });
                }
                return this.error({
                    error: ERRORS.INTERFACE_UNABLE_TO_OPEN_DEVICE,
                    message: err.message,
                });
            }
            if (first) {
                try {
                    (_d = this.logger) === null || _d === void 0 ? void 0 : _d.debug(`usb: device.selectConfiguration ${constants_1.CONFIGURATION_ID}`);
                    yield this.abortableMethod(() => device.selectConfiguration(constants_1.CONFIGURATION_ID), {
                        signal,
                    });
                    (_e = this.logger) === null || _e === void 0 ? void 0 : _e.debug(`usb: device.selectConfiguration done: ${constants_1.CONFIGURATION_ID}.`);
                }
                catch (err) {
                    (_f = this.logger) === null || _f === void 0 ? void 0 : _f.error(`usb: device.selectConfiguration error ${err}. device: ${this.formatDeviceForLog(device)}`);
                }
                try {
                    (_g = this.logger) === null || _g === void 0 ? void 0 : _g.debug('usb: device.reset');
                    yield this.abortableMethod(() => device === null || device === void 0 ? void 0 : device.reset(), { signal });
                    (_h = this.logger) === null || _h === void 0 ? void 0 : _h.debug(`usb: device.reset done.`);
                }
                catch (err) {
                    (_j = this.logger) === null || _j === void 0 ? void 0 : _j.error(`usb: device.reset error ${err}. device: ${this.formatDeviceForLog(device)}`);
                }
            }
            try {
                const interfaceId = this.debugLink ? constants_1.DEBUGLINK_INTERFACE_ID : constants_1.INTERFACE_ID;
                (_k = this.logger) === null || _k === void 0 ? void 0 : _k.debug(`usb: device.claimInterface: ${interfaceId}`);
                yield this.abortableMethod(() => device.claimInterface(interfaceId), { signal });
                (_l = this.logger) === null || _l === void 0 ? void 0 : _l.debug(`usb: device.claimInterface done: ${interfaceId}.`);
            }
            catch (err) {
                (_m = this.logger) === null || _m === void 0 ? void 0 : _m.error(`usb: device.claimInterface error ${err}.`);
                return this.error({
                    error: ERRORS.INTERFACE_UNABLE_TO_OPEN_DEVICE,
                    message: err.message,
                });
            }
            return this.success(undefined);
        });
    }
    closeDevice(path) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            let device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: closeDevice. device.opened: ${device.opened}`);
            if (device.opened) {
                if (!this.debugLink) {
                    try {
                        yield device.reset();
                    }
                    catch (err) {
                        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.error(`usb: device.reset error ${err}. device: ${this.formatDeviceForLog(device)}`);
                    }
                }
            }
            device = this.findDevice(path);
            if (device === null || device === void 0 ? void 0 : device.opened) {
                try {
                    const interfaceId = this.debugLink ? constants_1.DEBUGLINK_INTERFACE_ID : constants_1.INTERFACE_ID;
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.debug(`usb: device.releaseInterface: ${interfaceId}`);
                    yield device.releaseInterface(interfaceId);
                    (_d = this.logger) === null || _d === void 0 ? void 0 : _d.debug(`usb: device.releaseInterface done: ${interfaceId}.`);
                }
                catch (err) {
                    (_e = this.logger) === null || _e === void 0 ? void 0 : _e.error(`usb: releaseInterface error ${err}.`);
                }
            }
            device = this.findDevice(path);
            if (device === null || device === void 0 ? void 0 : device.opened) {
                try {
                    (_f = this.logger) === null || _f === void 0 ? void 0 : _f.debug(`usb: device.close`);
                    yield device.close();
                    (_g = this.logger) === null || _g === void 0 ? void 0 : _g.debug(`usb: device.close done.`);
                }
                catch (err) {
                    (_h = this.logger) === null || _h === void 0 ? void 0 : _h.debug(`usb: device.close error ${err}.`);
                    return this.error({
                        error: ERRORS.INTERFACE_UNABLE_TO_CLOSE_DEVICE,
                        message: err.message,
                    });
                }
            }
            return this.success(undefined);
        });
    }
    findDevice(path) {
        const device = this.devices.find(d => d.path === path);
        if (!device) {
            return;
        }
        return device.device;
    }
    createDevices(devices, signal) {
        return this.synchronizeCreateDevices(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            let bootloaderId = 0;
            const getPathFromUsbDevice = (device) => {
                var _a;
                const { serialNumber } = device;
                let path = serialNumber == null || serialNumber === '' ? 'bootloader' : serialNumber;
                if (path === 'bootloader') {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('usb: device without serial number!');
                    bootloaderId++;
                    path += bootloaderId;
                }
                return path;
            };
            const [hidDevices, nonHidDevices] = this.filterDevices(devices);
            const loadedDevices = yield Promise.all(nonHidDevices.map((device) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: creating device ${this.formatDeviceForLog(device)}`);
                if (this.forceReadSerialOnConnect &&
                    !device.opened &&
                    !device.serialNumber) {
                    yield this.loadSerialNumber(device, signal);
                }
                const path = getPathFromUsbDevice(device);
                return { path, device };
            })));
            return [
                ...loadedDevices,
                ...hidDevices.map(d => ({
                    path: getPathFromUsbDevice(d),
                    device: d,
                })),
            ];
        }));
    }
    loadSerialNumber(device, signal) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            try {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: loadSerialNumber`);
                yield this.abortableMethod(() => device.open(), { signal });
                yield this.abortableMethod(() => device
                    .getStringDescriptor(device.device.deviceDescriptor.iSerialNumber), { signal });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`usb: loadSerialNumber done, serialNumber: ${device.serialNumber}`);
                yield this.abortableMethod(() => device.close(), { signal });
            }
            catch (err) {
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(`usb: loadSerialNumber error: ${err.message}`);
                throw err;
            }
        });
    }
    deviceIsHid(device) {
        return device.vendorId === constants_1.T1_HID_VENDOR;
    }
    filterDevices(devices) {
        const trezorDevices = devices.filter(dev => {
            const isTrezor = constants_1.TREZOR_USB_DESCRIPTORS.some(desc => dev.vendorId === desc.vendorId && dev.productId === desc.productId);
            return isTrezor;
        });
        const hidDevices = trezorDevices.filter(dev => this.deviceIsHid(dev));
        const nonHidDevices = trezorDevices.filter(dev => !this.deviceIsHid(dev));
        return [hidDevices, nonHidDevices];
    }
    handleReadWriteError(err) {
        if ([
            'LIBUSB_TRANSFER_ERROR',
            'LIBUSB_ERROR_PIPE',
            'LIBUSB_ERROR_IO',
            'LIBUSB_ERROR_NO_DEVICE',
            'LIBUSB_ERROR_OTHER',
            ERRORS.INTERFACE_DATA_TRANSFER,
            'The device was disconnected.',
        ].some(disconnectedErr => {
            return err.message.includes(disconnectedErr);
        })) {
            return this.error({ error: ERRORS.DEVICE_DISCONNECTED_DURING_ACTION });
        }
        return this.unknownError(err);
    }
    dispose() {
        if (this.usbInterface) {
            this.usbInterface.onconnect = null;
            this.usbInterface.ondisconnect = null;
        }
        this.abortController.abort();
    }
}
exports.UsbApi = UsbApi;
//# sourceMappingURL=usb.js.map