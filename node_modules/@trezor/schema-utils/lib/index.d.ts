import { JavaScriptTypeBuilder, Static, TSchema, Optional, CloneType } from '@sinclair/typebox';
import { ArrayBufferBuilder, BufferBuilder, KeyofEnumBuilder, UintBuilder } from './custom-types';
declare const CustomTypeBuilder_base: import("ts-mixer/dist/types/types").Class<any[], JavaScriptTypeBuilder & ArrayBufferBuilder & BufferBuilder & KeyofEnumBuilder & UintBuilder, typeof JavaScriptTypeBuilder & typeof ArrayBufferBuilder & typeof BufferBuilder & typeof KeyofEnumBuilder & typeof UintBuilder>;
declare class CustomTypeBuilder extends CustomTypeBuilder_base {
}
export declare function Validate<T extends TSchema>(schema: T, value: unknown): value is Static<T>;
export declare function Assert<T extends TSchema>(schema: T, value: unknown): asserts value is Static<T>;
export declare function AssertWeak<T extends TSchema>(schema: T, value: unknown): asserts value is Static<T>;
export declare const Type: CustomTypeBuilder;
export { Optional, CloneType };
export type * from '@sinclair/typebox';
//# sourceMappingURL=index.d.ts.map