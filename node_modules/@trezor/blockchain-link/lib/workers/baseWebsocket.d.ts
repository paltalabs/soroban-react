import WebSocket from 'ws';
import { TypedEmitter } from '@trezor/utils';
interface Options {
    url: string;
    timeout?: number;
    pingTimeout?: number;
    connectionTimeout?: number;
    keepAlive?: boolean;
    agent?: WebSocket.ClientOptions['agent'];
    headers?: WebSocket.ClientOptions['headers'];
    onSending?: (message: Record<string, any>) => void;
}
type EventMap = {
    [event: string]: any;
};
type WsEvents = {
    error: string;
    disconnected: undefined;
};
export declare abstract class BaseWebsocket<T extends EventMap> extends TypedEmitter<T & WsEvents> {
    readonly options: Options;
    private readonly messages;
    private readonly subscriptions;
    private readonly emitter;
    private ws?;
    private pingTimeout?;
    private connectPromise?;
    protected abstract ping(): Promise<unknown>;
    protected abstract createWebsocket(): WebSocket;
    constructor(options: Options);
    private setPingTimeout;
    private onTimeout;
    private onPing;
    private onError;
    protected sendMessage(message: Record<string, any>): Promise<any>;
    protected onMessage(message: string): void;
    protected addSubscription<E extends keyof T>(type: E, callback: (result: T[E]) => void): void;
    protected removeSubscription(type: keyof T): number;
    connect(): Promise<void>;
    private init;
    disconnect(): void;
    isConnected(): boolean;
    private onClose;
    dispose(): void;
}
export {};
//# sourceMappingURL=baseWebsocket.d.ts.map