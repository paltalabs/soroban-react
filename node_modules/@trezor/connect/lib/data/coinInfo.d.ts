import type { CoinInfo, BitcoinNetworkInfo, DerivationPath } from '../types';
export declare const getBitcoinNetwork: (pathOrName: DerivationPath) => ({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    cashAddrPrefix?: string | undefined;
    xPubMagicSegwitNative?: number | undefined;
    xPubMagicSegwit?: number | undefined;
    taproot?: boolean | undefined;
    type: "bitcoin";
    dustLimit: number;
    curveName: string;
    forceBip143: boolean;
    hashGenesisBlock: string;
    maxAddressLength: number;
    maxFeeSatoshiKb: number;
    minAddressLength: number;
    minFeeSatoshiKb: number;
    segwit: boolean;
    xPubMagic: number;
    network: {
        forkId?: number | undefined;
        messagePrefix: string;
        bech32: string;
        bip32: {
            public: number;
            private: number;
        };
        pubKeyHash: number;
        scriptHash: number;
        wif: number;
    };
    isBitcoin: boolean;
}) | undefined;
export declare const getEthereumNetwork: (pathOrName: DerivationPath) => ({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    network?: undefined;
    type: "ethereum";
    chainId: number;
}) | undefined;
export declare const getMiscNetwork: (pathOrName: DerivationPath) => ({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    network?: undefined;
    type: "nem" | "misc";
    curve: string;
}) | undefined;
export declare const getSegwitNetwork: (coin: BitcoinNetworkInfo) => {
    bip32: {
        public: number;
        private: number;
    };
    forkId?: number | undefined;
    messagePrefix: string;
    bech32: string;
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
} | null;
export declare const getBech32Network: (coin: BitcoinNetworkInfo) => {
    bip32: {
        public: number;
        private: number;
    };
    forkId?: number | undefined;
    messagePrefix: string;
    bech32: string;
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
} | null;
export declare const fixCoinInfoNetwork: (ci: BitcoinNetworkInfo, path: number[]) => {
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    cashAddrPrefix?: string | undefined;
    xPubMagicSegwitNative?: number | undefined;
    xPubMagicSegwit?: number | undefined;
    taproot?: boolean | undefined;
    type: "bitcoin";
    dustLimit: number;
    curveName: string;
    forceBip143: boolean;
    hashGenesisBlock: string;
    maxAddressLength: number;
    maxFeeSatoshiKb: number;
    minAddressLength: number;
    minFeeSatoshiKb: number;
    segwit: boolean;
    xPubMagic: number;
    network: {
        forkId?: number | undefined;
        messagePrefix: string;
        bech32: string;
        bip32: {
            public: number;
            private: number;
        };
        pubKeyHash: number;
        scriptHash: number;
        wif: number;
    };
    isBitcoin: boolean;
};
export declare const getCoinInfoByHash: (hash: string, networkInfo: any) => {
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    cashAddrPrefix?: string | undefined;
    xPubMagicSegwitNative?: number | undefined;
    xPubMagicSegwit?: number | undefined;
    taproot?: boolean | undefined;
    type: "bitcoin";
    dustLimit: number;
    curveName: string;
    forceBip143: boolean;
    hashGenesisBlock: string;
    maxAddressLength: number;
    maxFeeSatoshiKb: number;
    minAddressLength: number;
    minFeeSatoshiKb: number;
    segwit: boolean;
    xPubMagic: number;
    network: {
        forkId?: number | undefined;
        messagePrefix: string;
        bech32: string;
        bip32: {
            public: number;
            private: number;
        };
        pubKeyHash: number;
        scriptHash: number;
        wif: number;
    };
    isBitcoin: boolean;
};
export declare const getCoinInfo: (currency: string) => ({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    cashAddrPrefix?: string | undefined;
    xPubMagicSegwitNative?: number | undefined;
    xPubMagicSegwit?: number | undefined;
    taproot?: boolean | undefined;
    type: "bitcoin";
    dustLimit: number;
    curveName: string;
    forceBip143: boolean;
    hashGenesisBlock: string;
    maxAddressLength: number;
    maxFeeSatoshiKb: number;
    minAddressLength: number;
    minFeeSatoshiKb: number;
    segwit: boolean;
    xPubMagic: number;
    network: {
        forkId?: number | undefined;
        messagePrefix: string;
        bech32: string;
        bip32: {
            public: number;
            private: number;
        };
        pubKeyHash: number;
        scriptHash: number;
        wif: number;
    };
    isBitcoin: boolean;
}) | ({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    network?: undefined;
    type: "ethereum";
    chainId: number;
}) | ({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    network?: undefined;
    type: "nem" | "misc";
    curve: string;
}) | undefined;
export declare const getCoinName: (path: number[]) => string;
export declare const ethereumNetworkInfoBase: {
    blockTime: number;
    minFee: number;
    maxFee: number;
    dustLimit: number;
    defaultFees: import("../types").FeeLevel[];
    type: "ethereum";
    decimals: number;
};
export declare const parseCoinsJson: (json: any) => void;
export declare const getUniqueNetworks: (networks: (CoinInfo | undefined)[]) => (({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    cashAddrPrefix?: string | undefined;
    xPubMagicSegwitNative?: number | undefined;
    xPubMagicSegwit?: number | undefined;
    taproot?: boolean | undefined;
    type: "bitcoin";
    dustLimit: number;
    curveName: string;
    forceBip143: boolean;
    hashGenesisBlock: string;
    maxAddressLength: number;
    maxFeeSatoshiKb: number;
    minAddressLength: number;
    minFeeSatoshiKb: number;
    segwit: boolean;
    xPubMagic: number;
    network: {
        forkId?: number | undefined;
        messagePrefix: string;
        bech32: string;
        bip32: {
            public: number;
            private: number;
        };
        pubKeyHash: number;
        scriptHash: number;
        wif: number;
    };
    isBitcoin: boolean;
}) | ({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    network?: undefined;
    type: "ethereum";
    chainId: number;
}) | ({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    network?: undefined;
    type: "nem" | "misc";
    curve: string;
}))[];
export declare const getAllNetworks: () => (({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    cashAddrPrefix?: string | undefined;
    xPubMagicSegwitNative?: number | undefined;
    xPubMagicSegwit?: number | undefined;
    taproot?: boolean | undefined;
    type: "bitcoin";
    dustLimit: number;
    curveName: string;
    forceBip143: boolean;
    hashGenesisBlock: string;
    maxAddressLength: number;
    maxFeeSatoshiKb: number;
    minAddressLength: number;
    minFeeSatoshiKb: number;
    segwit: boolean;
    xPubMagic: number;
    network: {
        forkId?: number | undefined;
        messagePrefix: string;
        bech32: string;
        bip32: {
            public: number;
            private: number;
        };
        pubKeyHash: number;
        scriptHash: number;
        wif: number;
    };
    isBitcoin: boolean;
}) | ({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    network?: undefined;
    type: "ethereum";
    chainId: number;
}) | ({
    blockchainLink?: {
        type: string;
        url: string[];
    } | undefined;
    label: string;
    blockTime: number;
    minFee: number;
    maxFee: number;
    name: string;
    shortcut: string;
    slip44: number;
    support: {
        T1B1: string | false;
        T2T1: string | false;
        T2B1: string | false;
        T3B1: string | false;
        T3T1: string | false;
        T3W1: string | false;
        connect: boolean;
    };
    decimals: number;
    defaultFees: {
        feeLimit?: string | undefined;
        feePerTx?: string | undefined;
        label: "normal" | "custom" | "high" | "economy" | "low";
        feePerUnit: string;
        blocks: number;
    }[];
} & {
    network?: undefined;
    type: "nem" | "misc";
    curve: string;
}))[];
//# sourceMappingURL=coinInfo.d.ts.map