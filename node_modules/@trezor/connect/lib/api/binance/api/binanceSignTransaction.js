"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const schema_utils_1 = require("@trezor/schema-utils");
const AbstractMethod_1 = require("../../../core/AbstractMethod");
const paramsValidator_1 = require("../../common/paramsValidator");
const coinInfo_1 = require("../../../data/coinInfo");
const pathUtils_1 = require("../../../utils/pathUtils");
const helper = tslib_1.__importStar(require("../binanceSignTx"));
const binance_1 = require("../../../types/api/binance");
class BinanceSignTransaction extends AbstractMethod_1.AbstractMethod {
    init() {
        var _a;
        this.requiredPermissions = ['read', 'write'];
        this.requiredDeviceCapabilities = ['Capability_Binance'];
        this.firmwareRange = (0, paramsValidator_1.getFirmwareRange)(this.name, (0, coinInfo_1.getMiscNetwork)('BNB'), this.firmwareRange);
        const { payload } = this;
        (0, schema_utils_1.AssertWeak)(binance_1.BinanceSignTransaction, payload);
        const path = (0, pathUtils_1.validatePath)(payload.path, 3);
        const transaction = helper.validate(payload.transaction);
        this.params = {
            path,
            transaction,
            chunkify: (_a = payload.chunkify) !== null && _a !== void 0 ? _a : false,
        };
    }
    get info() {
        return 'Sign Binance transaction';
    }
    run() {
        return helper.signTx(this.device.getCommands().typedCall.bind(this.device.getCommands()), this.params.path, this.params.transaction, this.params.chunkify);
    }
}
exports.default = BinanceSignTransaction;
//# sourceMappingURL=binanceSignTransaction.js.map