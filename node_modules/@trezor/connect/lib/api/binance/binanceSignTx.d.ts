import { PROTO } from '../../constants';
import { BinanceSDKTransaction, BinancePreparedTransaction } from '../../types/api/binance';
import type { TypedCall } from '../../device/DeviceCommands';
export declare const validate: (tx: BinanceSDKTransaction) => {
    account_number?: number | undefined;
    memo?: string | undefined;
    sequence?: number | undefined;
    source?: number | undefined;
    transfer?: {
        chunkify?: boolean | undefined;
        inputs: {
            address: string;
            coins: {
                amount: string | number;
                denom: string;
            }[];
        }[];
        outputs: {
            address: string;
            coins: {
                amount: string | number;
                denom: string;
            }[];
        }[];
    } | undefined;
    placeOrder?: {
        symbol?: string | undefined;
        id?: string | undefined;
        sender?: string | undefined;
        ordertype: PROTO.BinanceOrderType;
        price: number;
        quantity: number;
        side: PROTO.BinanceOrderSide;
        timeinforce: PROTO.BinanceTimeInForce;
    } | undefined;
    cancelOrder?: {
        symbol?: string | undefined;
        sender?: string | undefined;
        refid?: string | undefined;
    } | undefined;
    chain_id: string;
} & {
    account_number: number;
    sequence: number;
    source: number;
    messages: (({
        chunkify?: boolean | undefined;
        inputs: {
            address: string;
            coins: {
                amount: string | number;
                denom: string;
            }[];
        }[];
        outputs: {
            address: string;
            coins: {
                amount: string | number;
                denom: string;
            }[];
        }[];
    } & {
        type: "BinanceTransferMsg";
    }) | ({
        symbol?: string | undefined;
        id?: string | undefined;
        sender?: string | undefined;
        ordertype: PROTO.BinanceOrderType;
        price: number;
        quantity: number;
        side: PROTO.BinanceOrderSide;
        timeinforce: PROTO.BinanceTimeInForce;
    } & {
        type: "BinanceOrderMsg";
    }) | ({
        symbol?: string | undefined;
        sender?: string | undefined;
        refid?: string | undefined;
    } & {
        type: "BinanceCancelMsg";
    }))[];
};
export declare const signTx: (typedCall: TypedCall, address_n: number[], tx: BinancePreparedTransaction, chunkify?: boolean) => Promise<{
    signature: string;
    public_key: string;
}>;
//# sourceMappingURL=binanceSignTx.d.ts.map