import { TypedEmitter } from '@trezor/utils';
import { Transport, TRANSPORT } from '@trezor/transport';
import { DEVICE, TransportInfo } from '../events';
import { Device } from './Device';
import { ConnectSettings, DeviceUniquePath, Device as DeviceTyped, StaticSessionId } from '../types';
interface DeviceListEvents {
    [TRANSPORT.START]: TransportInfo;
    [TRANSPORT.ERROR]: string;
    [DEVICE.CONNECT]: DeviceTyped;
    [DEVICE.CONNECT_UNACQUIRED]: DeviceTyped;
    [DEVICE.DISCONNECT]: DeviceTyped;
    [DEVICE.CHANGED]: DeviceTyped;
}
export interface IDeviceList {
    isConnected(): this is DeviceList;
    pendingConnection(): Promise<void> | undefined;
    setTransports: DeviceList['setTransports'];
    addAuthPenalty: DeviceList['addAuthPenalty'];
    removeAuthPenalty: DeviceList['removeAuthPenalty'];
    on: DeviceList['on'];
    once: DeviceList['once'];
    init: DeviceList['init'];
    dispose: DeviceList['dispose'];
}
export declare const assertDeviceListConnected: (deviceList: IDeviceList) => asserts deviceList is DeviceList;
type ConstructorParams = Pick<ConnectSettings, 'priority' | 'debug' | '_sessionsBackgroundUrl' | 'manifest'> & {
    messages: Record<string, any>;
};
type InitParams = Pick<ConnectSettings, 'pendingTransportEvent' | 'transportReconnect'>;
export declare class DeviceList extends TypedEmitter<DeviceListEvents> implements IDeviceList {
    private transport;
    private transports;
    private devices;
    private deviceCounter;
    private readonly handshakeLock;
    private readonly authPenaltyManager;
    private initPromise?;
    private rejectPending?;
    private transportCommonArgs;
    isConnected(): this is DeviceList;
    pendingConnection(): Promise<void> | undefined;
    constructor({ messages, priority, debug, _sessionsBackgroundUrl, manifest, }: ConstructorParams);
    private createTransport;
    setTransports(transports: ConnectSettings['transports']): void;
    private onDeviceConnected;
    private onDeviceDisconnected;
    private onDeviceSessionChanged;
    private onDeviceRequestRelease;
    init(initParams?: InitParams): Promise<void>;
    private createInitPromise;
    private createReconnectPromise;
    private selectTransport;
    private initializeTransport;
    private waitForDevices;
    getDeviceCount(): number;
    getAllDevices(): Device[];
    getOnlyDevice(): Device | undefined;
    getDeviceByPath(path: DeviceUniquePath): Device | undefined;
    getDeviceByStaticState(state: StaticSessionId): Device | undefined;
    transportType(): "BridgeTransport" | "NodeUsbTransport" | "WebUsbTransport" | "UdpTransport" | "NativeUsbTransport" | "BluetoothTransport";
    getTransportInfo(): TransportInfo;
    dispose(): Promise<void>;
    cleanup(): Promise<void>;
    enumerate(transport?: Transport): Promise<void>;
    addAuthPenalty(device: Device): void;
    removeAuthPenalty(device: Device): void;
}
export {};
//# sourceMappingURL=DeviceList.d.ts.map