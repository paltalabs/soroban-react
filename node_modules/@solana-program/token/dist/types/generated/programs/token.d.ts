/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type ReadonlyUint8Array } from '@solana/web3.js';
import { type ParsedAmountToUiAmountInstruction, type ParsedApproveCheckedInstruction, type ParsedApproveInstruction, type ParsedBurnCheckedInstruction, type ParsedBurnInstruction, type ParsedCloseAccountInstruction, type ParsedFreezeAccountInstruction, type ParsedGetAccountDataSizeInstruction, type ParsedInitializeAccount2Instruction, type ParsedInitializeAccount3Instruction, type ParsedInitializeAccountInstruction, type ParsedInitializeImmutableOwnerInstruction, type ParsedInitializeMint2Instruction, type ParsedInitializeMintInstruction, type ParsedInitializeMultisig2Instruction, type ParsedInitializeMultisigInstruction, type ParsedMintToCheckedInstruction, type ParsedMintToInstruction, type ParsedRevokeInstruction, type ParsedSetAuthorityInstruction, type ParsedSyncNativeInstruction, type ParsedThawAccountInstruction, type ParsedTransferCheckedInstruction, type ParsedTransferInstruction, type ParsedUiAmountToAmountInstruction } from '../instructions';
export declare const TOKEN_PROGRAM_ADDRESS: Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
export declare enum TokenAccount {
    Mint = 0,
    Token = 1,
    Multisig = 2
}
export declare function identifyTokenAccount(account: {
    data: ReadonlyUint8Array;
} | ReadonlyUint8Array): TokenAccount;
export declare enum TokenInstruction {
    InitializeMint = 0,
    InitializeAccount = 1,
    InitializeMultisig = 2,
    Transfer = 3,
    Approve = 4,
    Revoke = 5,
    SetAuthority = 6,
    MintTo = 7,
    Burn = 8,
    CloseAccount = 9,
    FreezeAccount = 10,
    ThawAccount = 11,
    TransferChecked = 12,
    ApproveChecked = 13,
    MintToChecked = 14,
    BurnChecked = 15,
    InitializeAccount2 = 16,
    SyncNative = 17,
    InitializeAccount3 = 18,
    InitializeMultisig2 = 19,
    InitializeMint2 = 20,
    GetAccountDataSize = 21,
    InitializeImmutableOwner = 22,
    AmountToUiAmount = 23,
    UiAmountToAmount = 24
}
export declare function identifyTokenInstruction(instruction: {
    data: ReadonlyUint8Array;
} | ReadonlyUint8Array): TokenInstruction;
export type ParsedTokenInstruction<TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'> = ({
    instructionType: TokenInstruction.InitializeMint;
} & ParsedInitializeMintInstruction<TProgram>) | ({
    instructionType: TokenInstruction.InitializeAccount;
} & ParsedInitializeAccountInstruction<TProgram>) | ({
    instructionType: TokenInstruction.InitializeMultisig;
} & ParsedInitializeMultisigInstruction<TProgram>) | ({
    instructionType: TokenInstruction.Transfer;
} & ParsedTransferInstruction<TProgram>) | ({
    instructionType: TokenInstruction.Approve;
} & ParsedApproveInstruction<TProgram>) | ({
    instructionType: TokenInstruction.Revoke;
} & ParsedRevokeInstruction<TProgram>) | ({
    instructionType: TokenInstruction.SetAuthority;
} & ParsedSetAuthorityInstruction<TProgram>) | ({
    instructionType: TokenInstruction.MintTo;
} & ParsedMintToInstruction<TProgram>) | ({
    instructionType: TokenInstruction.Burn;
} & ParsedBurnInstruction<TProgram>) | ({
    instructionType: TokenInstruction.CloseAccount;
} & ParsedCloseAccountInstruction<TProgram>) | ({
    instructionType: TokenInstruction.FreezeAccount;
} & ParsedFreezeAccountInstruction<TProgram>) | ({
    instructionType: TokenInstruction.ThawAccount;
} & ParsedThawAccountInstruction<TProgram>) | ({
    instructionType: TokenInstruction.TransferChecked;
} & ParsedTransferCheckedInstruction<TProgram>) | ({
    instructionType: TokenInstruction.ApproveChecked;
} & ParsedApproveCheckedInstruction<TProgram>) | ({
    instructionType: TokenInstruction.MintToChecked;
} & ParsedMintToCheckedInstruction<TProgram>) | ({
    instructionType: TokenInstruction.BurnChecked;
} & ParsedBurnCheckedInstruction<TProgram>) | ({
    instructionType: TokenInstruction.InitializeAccount2;
} & ParsedInitializeAccount2Instruction<TProgram>) | ({
    instructionType: TokenInstruction.SyncNative;
} & ParsedSyncNativeInstruction<TProgram>) | ({
    instructionType: TokenInstruction.InitializeAccount3;
} & ParsedInitializeAccount3Instruction<TProgram>) | ({
    instructionType: TokenInstruction.InitializeMultisig2;
} & ParsedInitializeMultisig2Instruction<TProgram>) | ({
    instructionType: TokenInstruction.InitializeMint2;
} & ParsedInitializeMint2Instruction<TProgram>) | ({
    instructionType: TokenInstruction.GetAccountDataSize;
} & ParsedGetAccountDataSizeInstruction<TProgram>) | ({
    instructionType: TokenInstruction.InitializeImmutableOwner;
} & ParsedInitializeImmutableOwnerInstruction<TProgram>) | ({
    instructionType: TokenInstruction.AmountToUiAmount;
} & ParsedAmountToUiAmountInstruction<TProgram>) | ({
    instructionType: TokenInstruction.UiAmountToAmount;
} & ParsedUiAmountToAmountInstruction<TProgram>);
//# sourceMappingURL=token.d.ts.map