/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type WritableAccount } from '@solana/web3.js';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_MULTISIG_DISCRIMINATOR = 2;
export declare function getInitializeMultisigDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type InitializeMultisigInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMultisig extends string | IAccountMeta<string> = string, TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMultisig extends string ? WritableAccount<TAccountMultisig> : TAccountMultisig,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    ...TRemainingAccounts
]>;
export type InitializeMultisigInstructionData = {
    discriminator: number;
    /** The number of signers (M) required to validate this multisignature account. */
    m: number;
};
export type InitializeMultisigInstructionDataArgs = {
    /** The number of signers (M) required to validate this multisignature account. */
    m: number;
};
export declare function getInitializeMultisigInstructionDataEncoder(): Encoder<InitializeMultisigInstructionDataArgs>;
export declare function getInitializeMultisigInstructionDataDecoder(): Decoder<InitializeMultisigInstructionData>;
export declare function getInitializeMultisigInstructionDataCodec(): Codec<InitializeMultisigInstructionDataArgs, InitializeMultisigInstructionData>;
export type InitializeMultisigInput<TAccountMultisig extends string = string, TAccountRent extends string = string> = {
    /** The multisignature account to initialize. */
    multisig: Address<TAccountMultisig>;
    /** Rent sysvar. */
    rent?: Address<TAccountRent>;
    m: InitializeMultisigInstructionDataArgs['m'];
    signers: Array<Address>;
};
export declare function getInitializeMultisigInstruction<TAccountMultisig extends string, TAccountRent extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: InitializeMultisigInput<TAccountMultisig, TAccountRent>, config?: {
    programAddress?: TProgramAddress;
}): InitializeMultisigInstruction<TProgramAddress, TAccountMultisig, TAccountRent>;
export type ParsedInitializeMultisigInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The multisignature account to initialize. */
        multisig: TAccountMetas[0];
        /** Rent sysvar. */
        rent: TAccountMetas[1];
    };
    data: InitializeMultisigInstructionData;
};
export declare function parseInitializeMultisigInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeMultisigInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeMultisig.d.ts.map