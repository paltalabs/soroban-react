/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/web3.js';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const THAW_ACCOUNT_DISCRIMINATOR = 11;
export declare function getThawAccountDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type ThawAccountInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountAccount extends string | IAccountMeta<string> = string, TAccountMint extends string | IAccountMeta<string> = string, TAccountOwner extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountAccount extends string ? WritableAccount<TAccountAccount> : TAccountAccount,
    TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    ...TRemainingAccounts
]>;
export type ThawAccountInstructionData = {
    discriminator: number;
};
export type ThawAccountInstructionDataArgs = {};
export declare function getThawAccountInstructionDataEncoder(): Encoder<ThawAccountInstructionDataArgs>;
export declare function getThawAccountInstructionDataDecoder(): Decoder<ThawAccountInstructionData>;
export declare function getThawAccountInstructionDataCodec(): Codec<ThawAccountInstructionDataArgs, ThawAccountInstructionData>;
export type ThawAccountInput<TAccountAccount extends string = string, TAccountMint extends string = string, TAccountOwner extends string = string> = {
    /** The account to thaw. */
    account: Address<TAccountAccount>;
    /** The token mint. */
    mint: Address<TAccountMint>;
    /** The mint freeze authority or its multisignature account. */
    owner: Address<TAccountOwner> | TransactionSigner<TAccountOwner>;
    multiSigners?: Array<TransactionSigner>;
};
export declare function getThawAccountInstruction<TAccountAccount extends string, TAccountMint extends string, TAccountOwner extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: ThawAccountInput<TAccountAccount, TAccountMint, TAccountOwner>, config?: {
    programAddress?: TProgramAddress;
}): ThawAccountInstruction<TProgramAddress, TAccountAccount, TAccountMint, (typeof input)['owner'] extends TransactionSigner<TAccountOwner> ? ReadonlySignerAccount<TAccountOwner> & IAccountSignerMeta<TAccountOwner> : TAccountOwner>;
export type ParsedThawAccountInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The account to thaw. */
        account: TAccountMetas[0];
        /** The token mint. */
        mint: TAccountMetas[1];
        /** The mint freeze authority or its multisignature account. */
        owner: TAccountMetas[2];
    };
    data: ThawAccountInstructionData;
};
export declare function parseThawAccountInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedThawAccountInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=thawAccount.d.ts.map