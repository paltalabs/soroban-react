"use strict";var e=require("lit"),t=require("lit/decorators.js"),l=require("./styles.cjs"),o=Object.defineProperty,s=Object.getOwnPropertyDescriptor,i=(e,t,l,i)=>{for(var a,c=i>1?void 0:i?s(t,l):t,r=e.length-1;r>=0;r--)(a=e[r])&&(c=(i?a(t,l,c):a(c))||c);return i&&c&&o(t,l,c),c};exports.StellarSelectorModal=class extends e.LitElement{constructor(){super(...arguments),this.showModal=!1,this.loadingAccounts=!1,this.closingModal=!1,this.modalTitle="Pick your account",this.accounts=[]}connectedCallback(){super.connectedCallback()}async pickAccount(e){this.closingModal=!0,await new Promise((e=>setTimeout(e,280))),this.dispatchEvent(new CustomEvent("account-selected",{detail:e,bubbles:!0,composed:!0})),this.closingModal=!1}async closeModal(){this.closingModal=!0,await new Promise((e=>setTimeout(e,280))),this.showModal=!1,this.dispatchEvent(new CustomEvent("account-selector-closed",{detail:new Error("Account selector closed"),bubbles:!0,composed:!0})),this.closingModal=!1}render(){const t=e.html`
      <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <style>
          .spinner_qM83 {
            animation: spinner_8HQG 1.05s infinite;
            fill: white;
          }
          .spinner_oXPr {
            animation-delay: 0.1s;
          }
          .spinner_ZTLf {
            animation-delay: 0.2s;
          }
          @keyframes spinner_8HQG {
            0%,
            57.14% {
              animation-timing-function: cubic-bezier(0.33, 0.66, 0.66, 1);
              transform: translate(0);
            }
            28.57% {
              animation-timing-function: cubic-bezier(0.33, 0, 0.66, 0.33);
              transform: translateY(-6px);
            }
            100% {
              transform: translate(0);
            }
          }
        </style>
        <circle class="spinner_qM83" cx="4" cy="12" r="3" />
        <circle class="spinner_qM83 spinner_oXPr" cx="12" cy="12" r="3" />
        <circle class="spinner_qM83 spinner_ZTLf" cx="20" cy="12" r="3" />
      </svg>
    `,l=e.html`
      <ul class="wallets-body">
        ${this.accounts.map((({publicKey:t,index:l})=>e.html`
            <li @click="${()=>this.pickAccount({publicKey:t,index:l})}" class="wallets-body__item">
              <span style="margin-right: 1rem;" class="dialog-text-solid">
                ${t.slice(0,4)}....${t.slice(-6)}
              </span>
              <span class="dialog-text">(44'/148'/${l}')</span>
            </li>
          `))}
      </ul>
    `;return e.html`
      <dialog style="" class="dialog-modal ${this.closingModal?"closing":""}" .open=${this.showModal}>
        <section class="dialog-modal-body">
          <div class="dialog-modal-body__wallets">
            <section class="wallets-container">
              <header class="wallets-header">
                <h2 class="wallets-header__modal-title dialog-text-solid">${this.modalTitle}</h2>

                <button @click=${()=>this.closeModal()} class="wallets-header__button">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="#000000"
                    height="20px"
                    width="20px"
                    viewBox="0 0 490 490">
                    <polygon
                      points="456.851,0 245,212.564 33.149,0 0.708,32.337 212.669,245.004 0.708,457.678 33.149,490 245,277.443 456.851,490   489.292,457.678 277.331,245.004 489.292,32.337 " />
                  </svg>
                </button>
              </header>

              ${this.loadingAccounts?t:l}
            </section>
          </div>
        </section>
      </dialog>

      <div
        style="position: fixed; z-index: 950"
        class="backdrop ${this.closingModal?"closing":""}"
        @click=${()=>this.closeModal()}></div>
    `}},exports.StellarSelectorModal.styles=[e.css`
      :host * {
        box-sizing: border-box;
      }

      .mb-0 {
        margin-bottom: 0 !important;
      }
    `,l.modalDialogStyles,l.modalDialogBodyStyles,l.modalHelpSection,l.backdropStyles,l.modalAnimations,l.modalWalletsSection],i([t.property({type:Boolean,reflect:!0})],exports.StellarSelectorModal.prototype,"showModal",2),i([t.property({type:Boolean,reflect:!0})],exports.StellarSelectorModal.prototype,"loadingAccounts",2),i([t.state()],exports.StellarSelectorModal.prototype,"closingModal",2),i([t.property({type:String,reflect:!0})],exports.StellarSelectorModal.prototype,"modalTitle",2),i([t.property({type:String,reflect:!0,converter:e=>e?JSON.parse(e):[]})],exports.StellarSelectorModal.prototype,"accounts",2),exports.StellarSelectorModal=i([t.customElement("stellar-accounts-selector")],exports.StellarSelectorModal);
//# sourceMappingURL=stellar-selector-modal.cjs.map
