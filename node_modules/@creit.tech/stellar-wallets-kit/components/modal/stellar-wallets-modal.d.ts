import { LitElement } from 'lit';
import { ReactiveState } from '../../state/reactive-state';
import { ISupportedWallet, IModalTheme } from '../../types';
export declare enum ModalThemeType {
    DARK = "DARK",
    LIGHT = "LIGHT"
}
export declare const ModalThemes: {
    [key in ModalThemeType]: IModalTheme;
};
export declare class StellarWalletsModal extends LitElement {
    static styles: import("lit").CSSResult[];
    /**
     * This value is used to tell the modal that it should not update the value
     * `showModal` at any moment, this comes handy when the state wants to be handled by another source
     */
    ignoreShowStatus: boolean;
    showModal: boolean;
    closingModal: boolean;
    modalTitle: string;
    notAvailableText: string;
    allowedWallets: ReactiveState<ISupportedWallet[]>;
    theme: ReactiveState<IModalTheme | undefined>;
    connectedCallback(): void;
    closeModal(): Promise<void>;
    pickWalletOption(option: ISupportedWallet): Promise<void>;
    /**
     * This function gets the list of the wallets following the logic from this task https://github.com/Creit-Tech/Stellar-Wallets-Kit/issues/28
     * It follows this order:
     * 1- Wallet last used by wallet selector
     * 2- If not wallet last use, wallets detected in the browser
     * 3- Wallet ordering as defined by the developer
     *
     */
    private getSortedList;
    private getThemeStyles;
    render(): import("lit").TemplateResult<1>;
}
//# sourceMappingURL=stellar-wallets-modal.d.ts.map