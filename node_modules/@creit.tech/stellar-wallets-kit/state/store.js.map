{"version":3,"file":"store.js","sources":["../../src/state/store.ts"],"sourcesContent":["import { createStore, select, setProp, withProps } from '@ngneat/elf';\nimport { Observable } from 'rxjs';\nimport { ISupportedWallet, IModalTheme, WalletNetwork, IButtonTheme } from '../types';\n\nexport interface StateProps {\n  allowedWallets: ISupportedWallet[];\n\n  horizonUrl?: string;\n\n  selectedNetwork?: WalletNetwork;\n  selectedModuleId?: string;\n\n  modalTheme?: IModalTheme;\n  buttonTheme?: IButtonTheme;\n\n  activeAddress?: string;\n  mnemonicPath?: string;\n  hardwareWalletPaths: { publicKey: string; index: number }[];\n}\n\nexport const store = createStore(\n  { name: 'state' },\n  withProps<StateProps>({\n    allowedWallets: [],\n    hardwareWalletPaths: [],\n  })\n);\n\nexport const allowedWallets$: Observable<ISupportedWallet[]> = store.pipe(\n  select((state: StateProps) => state.allowedWallets)\n);\n\nexport const selectedNetwork$: Observable<StateProps['selectedNetwork']> = store.pipe(\n  select((state: StateProps) => state.selectedNetwork)\n);\n\nexport const modalTheme$: Observable<IModalTheme | undefined> = store.pipe(\n  select((state: StateProps) => state.modalTheme)\n);\n\nexport const buttonTheme$: Observable<IButtonTheme | undefined> = store.pipe(\n  select((state: StateProps) => state.buttonTheme)\n);\n\nexport const activeAddress$: Observable<string | undefined> = store.pipe(\n  select((state: StateProps) => state.activeAddress)\n);\n\nexport const horizonUrl$: Observable<string | undefined> = store.pipe(select((state: StateProps) => state.horizonUrl));\n\nexport const mnemonicPath$: Observable<string | undefined> = store.pipe(\n  select((state: StateProps) => state.mnemonicPath)\n);\n\nexport const hardwareWalletPaths$: Observable<{ publicKey: string; index: number }[]> = store.pipe(\n  select((state: StateProps) => state.hardwareWalletPaths)\n);\n\nexport function setSelectedModuleId(moduleId: Required<StateProps['selectedModuleId']>): void {\n  store.update(setProp('selectedModuleId', moduleId));\n}\n\nexport function setNetwork(network: WalletNetwork): void {\n  if (!Object.values(WalletNetwork).includes(network)) {\n    throw new Error(`Wallet network \"${network}\" is not supported`);\n  }\n\n  store.update(setProp('selectedNetwork', network));\n}\n\nexport function setModalTheme(theme: IModalTheme): void {\n  store.update(setProp('modalTheme', theme));\n}\n\nexport function seButtonTheme(theme: IButtonTheme): void {\n  store.update(setProp('buttonTheme', theme));\n}\n\nexport function setAllowedWallets(data: ISupportedWallet[]) {\n  store.update(setProp('allowedWallets', data));\n}\n\nexport function setAddress(address: string): void {\n  store.update(setProp('activeAddress', address));\n}\n\nexport function removeAddress(): void {\n  store.update(setProp('activeAddress', undefined));\n}\n\nexport function setHorizonUrl(url: string): void {\n  store.update(setProp('horizonUrl', url));\n}\n\nexport function setMnemonicPath(path: string): void {\n  store.update(setProp('mnemonicPath', path));\n}\n\nexport function removeMnemonicPath(): void {\n  store.update(setProp('mnemonicPath', undefined));\n}\n\nexport function setHardwareWalletPaths(accounts: { publicKey: string; index: number }[]): void {\n  store.update(setProp('hardwareWalletPaths', accounts));\n}\n\nexport function removeHardwareWalletPaths(): void {\n  store.update(setProp('hardwareWalletPaths', []));\n}\n"],"names":["store","createStore","name","withProps","allowedWallets","hardwareWalletPaths","allowedWallets$","pipe","select","state","selectedNetwork$","selectedNetwork","modalTheme$","modalTheme","buttonTheme$","buttonTheme","activeAddress$","activeAddress","horizonUrl$","horizonUrl","mnemonicPath$","mnemonicPath","hardwareWalletPaths$","setSelectedModuleId","moduleId","update","setProp","setNetwork","network","Object","values","WalletNetwork","includes","Error","setModalTheme","theme","seButtonTheme","setAllowedWallets","data","setAddress","address","removeAddress","setHorizonUrl","url","setMnemonicPath","path","removeMnemonicPath","setHardwareWalletPaths","accounts","removeHardwareWalletPaths"],"mappings":"8HAoBO,MAAMA,EAAQC,EACnB,CAAEC,KAAM,SACRC,EAAsB,CACpBC,eAAgB,GAChBC,oBAAqB,MAIZC,EAAkDN,EAAMO,KACnEC,GAAQC,GAAsBA,EAAML,kBAGzBM,EAA8DV,EAAMO,KAC/EC,GAAQC,GAAsBA,EAAME,mBAGzBC,EAAmDZ,EAAMO,KACpEC,GAAQC,GAAsBA,EAAMI,cAGzBC,EAAqDd,EAAMO,KACtEC,GAAQC,GAAsBA,EAAMM,eAGzBC,EAAiDhB,EAAMO,KAClEC,GAAQC,GAAsBA,EAAMQ,iBAGzBC,EAA8ClB,EAAMO,KAAKC,GAAQC,GAAsBA,EAAMU,cAE7FC,EAAgDpB,EAAMO,KACjEC,GAAQC,GAAsBA,EAAMY,gBAGzBC,EAA2EtB,EAAMO,KAC5FC,GAAQC,GAAsBA,EAAMJ,uBAG/B,SAASkB,EAAoBC,GAClCxB,EAAMyB,OAAOC,EAAQ,mBAAoBF,GAC3C,CAEO,SAASG,EAAWC,GACzB,IAAKC,OAAOC,OAAOC,GAAeC,SAASJ,GACzC,MAAM,IAAIK,MAAM,mBAAmBL,uBAGrC5B,EAAMyB,OAAOC,EAAQ,kBAAmBE,GAC1C,CAEO,SAASM,EAAcC,GAC5BnC,EAAMyB,OAAOC,EAAQ,aAAcS,GACrC,CAEO,SAASC,EAAcD,GAC5BnC,EAAMyB,OAAOC,EAAQ,cAAeS,GACtC,CAEO,SAASE,EAAkBC,GAChCtC,EAAMyB,OAAOC,EAAQ,iBAAkBY,GACzC,CAEO,SAASC,EAAWC,GACzBxC,EAAMyB,OAAOC,EAAQ,gBAAiBc,GACxC,CAEO,SAASC,IACdzC,EAAMyB,OAAOC,EAAQ,qBAAiB,GACxC,CAEO,SAASgB,EAAcC,GAC5B3C,EAAMyB,OAAOC,EAAQ,aAAciB,GACrC,CAEO,SAASC,EAAgBC,GAC9B7C,EAAMyB,OAAOC,EAAQ,eAAgBmB,GACvC,CAEO,SAASC,IACd9C,EAAMyB,OAAOC,EAAQ,oBAAgB,GACvC,CAEO,SAASqB,EAAuBC,GACrChD,EAAMyB,OAAOC,EAAQ,sBAAuBsB,GAC9C,CAEO,SAASC,IACdjD,EAAMyB,OAAOC,EAAQ,sBAAuB,IAC9C"}