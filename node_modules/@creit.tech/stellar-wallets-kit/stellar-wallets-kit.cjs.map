{"version":3,"file":"stellar-wallets-kit.cjs","sources":["../src/stellar-wallets-kit.ts"],"sourcesContent":["import { StellarWalletsButton } from './components/button/stellar-wallets-button';\nimport { StellarWalletsModal } from './components/modal/stellar-wallets-modal';\nimport {\n  removeAddress,\n  seButtonTheme,\n  setAddress,\n  setAllowedWallets,\n  setHorizonUrl,\n  setModalTheme,\n  setNetwork,\n  setSelectedModuleId,\n  store,\n} from './state/store';\nimport { IButtonTheme, ISupportedWallet, IModalTheme, KitActions, ModuleInterface, WalletNetwork } from './types';\n\nexport interface StellarWalletsKitParams {\n  selectedWalletId: string;\n  network: WalletNetwork;\n  modules: ModuleInterface[];\n  /**\n   * @deprecated - This parameter will be removed in a future release, use `modalTheme` instead\n   */\n  theme?: IModalTheme;\n  modalTheme?: IModalTheme;\n  buttonTheme?: IButtonTheme;\n}\n\nexport class StellarWalletsKit implements KitActions {\n  private buttonElement?: StellarWalletsButton;\n  private modalElement?: StellarWalletsModal;\n  private readonly modules: ModuleInterface[];\n\n  private get selectedModule(): ModuleInterface {\n    const target: ModuleInterface | undefined = this.modules.find(\n      (mod: ModuleInterface): boolean => mod.productId === store.getValue().selectedModuleId\n    );\n\n    if (!target) {\n      throw { code: -3, message: 'Please set the wallet first' };\n    }\n\n    return target;\n  }\n\n  constructor(params: StellarWalletsKitParams) {\n    this.modules = params.modules;\n    this.setWallet(params.selectedWalletId);\n    setNetwork(params.network);\n\n    const modalTheme: IModalTheme | undefined = params.theme || params.modalTheme;\n    if (modalTheme) {\n      setModalTheme(modalTheme);\n    }\n\n    if (params.buttonTheme) {\n      seButtonTheme(params.buttonTheme);\n    }\n\n    this.getSupportedWallets().then((value: ISupportedWallet[]): void => {\n      setAllowedWallets(value);\n    });\n  }\n\n  /**\n   * This method will return an array with all wallets supported by this kit but will let you know those the user have already installed/has access to\n   * There are wallets that are by default available since they either don't need to be installed or have a fallback\n   */\n  public async getSupportedWallets(): Promise<ISupportedWallet[]> {\n    return Promise.all(\n      this.modules.map(async (mod: ModuleInterface): Promise<ISupportedWallet> => {\n        const timer: Promise<false> = new Promise(r => setTimeout(() => r(false), 500));\n        return {\n          id: mod.productId,\n          name: mod.productName,\n          type: mod.moduleType,\n          icon: mod.productIcon,\n          isAvailable: await Promise.race([timer, mod.isAvailable()]),\n          url: mod.productUrl,\n        };\n      })\n    );\n  }\n\n  public setWallet(id: string): void {\n    const target: ModuleInterface | undefined = this.modules.find(\n      (mod: ModuleInterface): boolean => mod.productId === id\n    );\n\n    if (!target) {\n      throw new Error(`Wallet id \"${id}\" is not supported`);\n    }\n\n    setSelectedModuleId(target.productId);\n  }\n\n  public async getAddress(params?: { path?: string }): Promise<{ address: string }> {\n    const { address } = await this.selectedModule.getAddress(params);\n    setAddress(address);\n    return { address };\n  }\n\n  public async signTransaction(\n    xdr: string,\n    opts?: {\n      networkPassphrase?: string;\n      address?: string;\n      path?: string;\n      submit?: boolean;\n      submitUrl?: string;\n    }\n  ): Promise<{ signedTxXdr: string; signerAddress?: string }> {\n    return this.selectedModule.signTransaction(xdr, {\n      ...opts,\n      networkPassphrase: opts?.networkPassphrase || store.getValue().selectedNetwork,\n    });\n  }\n\n  public async signAuthEntry(\n    authEntry: string,\n    opts?: {\n      networkPassphrase?: string;\n      address?: string;\n      path?: string;\n    }\n  ): Promise<{ signedAuthEntry: string; signerAddress?: string }> {\n    return this.selectedModule.signAuthEntry(authEntry, {\n      ...opts,\n      networkPassphrase: opts?.networkPassphrase || store.getValue().selectedNetwork,\n    });\n  }\n\n  public async signMessage(\n    message: string,\n    opts?: {\n      networkPassphrase?: string;\n      address?: string;\n      path?: string;\n    }\n  ): Promise<{ signedMessage: string; signerAddress?: string }> {\n    return this.selectedModule.signMessage(message, {\n      ...opts,\n      networkPassphrase: opts?.networkPassphrase || store.getValue().selectedNetwork,\n    });\n  }\n\n  async getNetwork(): Promise<{ network: string; networkPassphrase: string }> {\n    return this.selectedModule.getNetwork();\n  }\n\n  async disconnect(): Promise<void> {\n    removeAddress();\n  }\n\n  // ---- Button methods\n  public isButtonCreated(): boolean {\n    return !!this.buttonElement;\n  }\n\n  /**\n   * This method allows developers to set their own buttons (for connection and disconnection) on their website\n   * while letting the kit handle the logic behind opening the modal, setting and removing the address from the storage, etc\n   */\n  public assignButtons(params: {\n    connectEl: HTMLElement | string;\n    disconnectEl?: HTMLElement | string;\n    onConnect: (response: { address: string }) => void;\n    onDisconnect: () => void;\n  }): void {\n    const connectEl: HTMLElement =\n      typeof params.connectEl === 'string'\n        ? (document.querySelector(params.connectEl) as HTMLElement)\n        : params.connectEl;\n\n    if (!connectEl) throw new Error('connectEl is not available');\n\n    connectEl.addEventListener(\n      'click',\n      () => {\n        this.openModal({\n          onWalletSelected: option => {\n            setSelectedModuleId(option.id);\n            this.getAddress().then((r: { address: string }) => params.onConnect(r));\n          },\n        }).then();\n      },\n      false\n    );\n\n    if (!params.disconnectEl) return;\n\n    const disconnectEl: HTMLElement =\n      typeof params.disconnectEl === 'string'\n        ? (document.querySelector(params.disconnectEl) as HTMLElement)\n        : params.disconnectEl;\n\n    if (!disconnectEl) throw new Error('disconnectEl is not available');\n\n    disconnectEl.addEventListener(\n      'click',\n      () => {\n        params.onDisconnect();\n        removeAddress();\n\n        if (this.selectedModule.disconnect) {\n          this.selectedModule.disconnect().then();\n        }\n      },\n      false\n    );\n  }\n\n  public async createButton(params: {\n    container: HTMLElement;\n    onConnect: (response: { address: string }) => void;\n    onDisconnect: () => void;\n    horizonUrl?: string;\n    buttonText?: string;\n  }): Promise<void> {\n    if (this.buttonElement) {\n      throw new Error(`Stellar Wallets Kit button is already created`);\n    }\n\n    this.buttonElement = document.createElement('stellar-wallets-button') as StellarWalletsButton;\n\n    if (params.buttonText) {\n      this.buttonElement.setAttribute('buttonText', params.buttonText);\n    }\n\n    if (params.horizonUrl) {\n      setHorizonUrl(params.horizonUrl);\n    }\n\n    params.container.appendChild(this.buttonElement);\n\n    this.buttonElement.addEventListener(\n      'button-clicked',\n      () => {\n        this.openModal({\n          onWalletSelected: option => {\n            setSelectedModuleId(option.id);\n            this.getAddress().then((r: { address: string }) => params.onConnect(r));\n          },\n        });\n      },\n      false\n    );\n\n    this.buttonElement.addEventListener(\n      'disconnect-wallet',\n      () => {\n        params.onDisconnect();\n\n        if (this.selectedModule.disconnect) {\n          this.selectedModule.disconnect();\n        }\n      },\n      false\n    );\n  }\n\n  /**\n   * Removes the button elements from the HTML and from the kit's instance.\n   *\n   * @param params.skipDisconnect - Set this to `true` if you want to prevent that we disconnect (for example, disconnecting WalletConnect or removing the address)\n   */\n  public async removeButton(params?: { skipDisconnect?: boolean }): Promise<void> {\n    if (!this.buttonElement) {\n      throw new Error(`Stellar Wallets Kit button hasn't been created yet`);\n    }\n\n    if (params?.skipDisconnect !== true) {\n      this.buttonElement.disconnect();\n    }\n\n    this.buttonElement.remove();\n    delete this.buttonElement;\n  }\n  // ---- END Button methods\n\n  // ---- Modal methods\n  public async openModal(params: {\n    onWalletSelected: (option: ISupportedWallet) => void;\n    onClosed?: (err: Error) => void;\n    modalTitle?: string;\n    notAvailableText?: string;\n  }): Promise<void> {\n    if (this.modalElement && !this.buttonElement) {\n      throw new Error(`Stellar Wallets Kit modal is already open`);\n    } else {\n      this.modalElement = document.createElement('stellar-wallets-modal') as StellarWalletsModal;\n    }\n\n    this.modalElement.setAttribute('showModal', '');\n\n    if (params.modalTitle) {\n      this.modalElement.setAttribute('modalTitle', params.modalTitle);\n    }\n\n    if (params.notAvailableText) {\n      this.modalElement.setAttribute('notAvailableText', params.notAvailableText);\n    }\n\n    document.body.appendChild(this.modalElement);\n\n    const listener = (event: CustomEvent) => {\n      params.onWalletSelected(event.detail);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.modalElement.removeEventListener('wallet-selected', listener, false);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      document.body.removeChild(this.modalElement);\n      this.modalElement = undefined;\n    };\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.modalElement.addEventListener('wallet-selected', listener, false);\n\n    const errorListener = (event: CustomEvent) => {\n      if (params.onClosed) {\n        params.onClosed(event.detail);\n      }\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.modalElement.removeEventListener('wallet-selected', listener, false);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.modalElement.removeEventListener('modal-closed', errorListener, false);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      document.body.removeChild(this.modalElement);\n      this.modalElement = undefined;\n    };\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.modalElement.addEventListener('modal-closed', errorListener, false);\n  }\n  // ---- END Modal methods\n}\n"],"names":["selectedModule","target","this","modules","find","mod","productId","store","getValue","selectedModuleId","code","message","constructor","params","setWallet","selectedWalletId","setNetwork","network","modalTheme","theme","setModalTheme","buttonTheme","seButtonTheme","getSupportedWallets","then","value","setAllowedWallets","Promise","all","map","async","timer","r","setTimeout","id","name","productName","type","moduleType","icon","productIcon","isAvailable","race","url","productUrl","Error","setSelectedModuleId","getAddress","address","setAddress","signTransaction","xdr","opts","networkPassphrase","selectedNetwork","signAuthEntry","authEntry","signMessage","getNetwork","disconnect","removeAddress","isButtonCreated","buttonElement","assignButtons","connectEl","document","querySelector","addEventListener","openModal","onWalletSelected","option","onConnect","disconnectEl","onDisconnect","createButton","createElement","buttonText","setAttribute","horizonUrl","setHorizonUrl","container","appendChild","removeButton","skipDisconnect","remove","modalElement","modalTitle","notAvailableText","body","listener","event","detail","removeEventListener","removeChild","errorListener","onClosed"],"mappings":"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"}