import{isConnected as r,requestAccess as s,getAddress as e,signTransaction as t,signAuthEntry as n,signMessage as a,getNetwork as h}from"@stellar/freighter-api";import{ModuleType as i}from"../types.js";import{parseError as o}from"../utils.js";import{Buffer as c}from"buffer";const d="freighter";class g{constructor(){this.moduleType=i.HOT_WALLET,this.productId=d,this.productName="Freighter",this.productUrl="https://freighter.app",this.productIcon="https://stellar.creit.tech/wallet-icons/freighter.png"}async runChecks(){if(!await this.isAvailable())throw new Error("Freighter is not connected")}async isAvailable(){return r().then((({isConnected:r,error:s})=>!s&&r)).catch((()=>!1))}async getAddress(){return this.runChecks().then((()=>s())).then((()=>e())).then((({address:r,error:s})=>{if(s)throw s;return{address:r}})).catch((r=>{throw o(r)}))}async signTransaction(r,s){return this.runChecks().then((async()=>{const{signedTxXdr:e,signerAddress:n,error:a}=await t(r,{address:s?.address,networkPassphrase:s?.networkPassphrase});if(a)throw a;return{signedTxXdr:e,signerAddress:n}})).catch((r=>{throw o(r)}))}async signAuthEntry(r,s){return this.runChecks().then((async()=>{const{signedAuthEntry:e,signerAddress:t,error:a}=await n(r,{address:s?.address,networkPassphrase:s?.networkPassphrase});if(a||!e)throw a;return{signedAuthEntry:c.from(e).toString("base64"),signerAddress:t}})).catch((r=>{throw o(r)}))}async signMessage(r,s){return this.runChecks().then((async()=>{const{signedMessage:e,signerAddress:t,error:n}=await a(r,{address:s?.address,networkPassphrase:s?.networkPassphrase});if(n||!e)throw n;return{signedMessage:c.from(e).toString("base64"),signerAddress:t}})).catch((r=>{throw o(r)}))}async getNetwork(){return this.runChecks().then((async()=>{const{network:r,networkPassphrase:s,error:e}=await h();if(e)throw e;return{network:r,networkPassphrase:s}})).catch((r=>{throw o(r)}))}}export{d as FREIGHTER_ID,g as FreighterModule};
//# sourceMappingURL=freighter.module.js.map
