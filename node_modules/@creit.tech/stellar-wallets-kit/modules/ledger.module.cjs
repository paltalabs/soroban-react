"use strict";var e=require("@ledgerhq/hw-app-str"),t=require("@ledgerhq/hw-transport-webusb"),r=require("rxjs"),s=require("../state/store.cjs"),a=require("../types.cjs"),n=require("@stellar/stellar-base"),o=require("../utils.cjs");const i="LEDGER";exports.LEDGER_ID=i,exports.LedgerModule=class{constructor(){this.moduleType=a.ModuleType.HW_WALLET,this.productId=i,this.productName="Ledger",this.productUrl="https://www.ledger.com/",this.productIcon="https://stellar.creit.tech/wallet-icons/ledger.png"}async transport(){if(!await t.isSupported())throw new Error("Ledger can not be used with this device.");return this._transport||(this._transport=await t.create()),this._transport}async disconnect(){s.removeMnemonicPath(),s.removeHardwareWalletPaths(),this._transport?.close(),this._transport=void 0}async isAvailable(){return t.isSupported()}async runChecks(){if(!await this.isAvailable())throw new Error("Ledger wallets can not be used")}async getAddress(t){await this.runChecks();let a=await r.firstValueFrom(s.mnemonicPath$);const i=await this.transport(),c=new e(i);a||(await this.openAccountSelector(),a=await r.firstValueFrom(s.mnemonicPath$));try{const e=await c.getPublicKey(t?.path||a);return{address:n.StrKey.encodeEd25519PublicKey(e.rawPublicKey)}}catch(e){throw o.parseError(e)}}async getAddresses(t=0){const r=await this.transport(),a=new e(r),o=10*t,i=[];for(let e=0;e<10;e++){const t=await a.getPublicKey(`44'/148'/${e+o}'`);i.push({publicKey:n.StrKey.encodeEd25519PublicKey(t.rawPublicKey),index:e+o})}return s.setHardwareWalletPaths(i),i}async openAccountSelector(){return new Promise(((e,t)=>{const r=document.createElement("stellar-accounts-selector");r.setAttribute("showModal",""),r.setAttribute("loadingAccounts",""),document.body.appendChild(r),this.getAddresses().then((e=>{r.setAttribute("accounts",JSON.stringify(e)),r.removeAttribute("loadingAccounts")})).catch((e=>{r.remove(),t(e)}));const a=t=>{const{publicKey:n,index:o}=t.detail;s.setMnemonicPath(`44'/148'/${o}'`),e({publicKey:n,index:o}),r.removeEventListener("account-selected",a,!1),document.body.removeChild(r)};r.addEventListener("account-selected",a,!1);const n=e=>{r.removeEventListener("account-selected",a,!1),r.removeEventListener("account-selector-closed",n,!1),document.body.removeChild(r),t(e.detail)};r.addEventListener("account-selector-closed",n,!1)}))}async signTransaction(t,a){await this.runChecks();const o=await this.transport(),i=new e(o);let c,d;if(a?.path){c=a.path;const e=await i.getPublicKey(c);d=n.StrKey.encodeEd25519PublicKey(e.rawPublicKey)}else if(a?.address){const e=(await r.firstValueFrom(s.hardwareWalletPaths$)).find((e=>e.publicKey===a.address));if(!e)throw new Error("This address has not been loaded from this ledger");c=`44'/148'/${e.index}'`,d=e.publicKey}else{if(c=await r.firstValueFrom(s.mnemonicPath$),!c)throw new Error("There is no path available, please call the `getAddress` method first.");const e=await i.getPublicKey(c);d=n.StrKey.encodeEd25519PublicKey(e.rawPublicKey)}const l=a?.networkPassphrase||await r.firstValueFrom(s.selectedNetwork$);if(!l)throw new Error("You need to provide or set a network passphrase");const u=new n.Transaction(t,l),h=a?.nonBlindTx?await i.signTransaction(c,u.signatureBase()):await i.signHash(c,u.hash());return u.addSignature(d,h.signature.toString("base64")),{signedTxXdr:u.toXDR(),signerAddress:d}}async signAuthEntry(){throw{code:-3,message:'Ledger Wallets do not support the "signAuthEntry" function'}}async signMessage(){throw{code:-3,message:'Ledger Wallets do not support the "signMessage" function'}}async getNetwork(){throw{code:-3,message:'Ledger Wallets do not support the "getNetwork" function'}}};
//# sourceMappingURL=ledger.module.cjs.map
