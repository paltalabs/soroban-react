import e from"@ledgerhq/hw-app-str";import t from"@ledgerhq/hw-transport-webusb";import{firstValueFrom as s}from"rxjs";import{removeMnemonicPath as r,removeHardwareWalletPaths as o,mnemonicPath$ as n,setHardwareWalletPaths as a,setMnemonicPath as i,hardwareWalletPaths$ as c,selectedNetwork$ as d}from"../state/store.js";import{ModuleType as l}from"../types.js";import{StrKey as u,Transaction as h}from"@stellar/stellar-base";import{parseError as p}from"../utils.js";const w="LEDGER";class g{constructor(){this.moduleType=l.HW_WALLET,this.productId=w,this.productName="Ledger",this.productUrl="https://www.ledger.com/",this.productIcon="https://stellar.creit.tech/wallet-icons/ledger.png"}async transport(){if(!await t.isSupported())throw new Error("Ledger can not be used with this device.");return this._transport||(this._transport=await t.create()),this._transport}async disconnect(){r(),o(),this._transport?.close(),this._transport=void 0}async isAvailable(){return t.isSupported()}async runChecks(){if(!await this.isAvailable())throw new Error("Ledger wallets can not be used")}async getAddress(t){await this.runChecks();let r=await s(n);const o=await this.transport(),a=new e(o);r||(await this.openAccountSelector(),r=await s(n));try{const e=await a.getPublicKey(t?.path||r);return{address:u.encodeEd25519PublicKey(e.rawPublicKey)}}catch(e){throw p(e)}}async getAddresses(t=0){const s=await this.transport(),r=new e(s),o=10*t,n=[];for(let e=0;e<10;e++){const t=await r.getPublicKey(`44'/148'/${e+o}'`);n.push({publicKey:u.encodeEd25519PublicKey(t.rawPublicKey),index:e+o})}return a(n),n}async openAccountSelector(){return new Promise(((e,t)=>{const s=document.createElement("stellar-accounts-selector");s.setAttribute("showModal",""),s.setAttribute("loadingAccounts",""),document.body.appendChild(s),this.getAddresses().then((e=>{s.setAttribute("accounts",JSON.stringify(e)),s.removeAttribute("loadingAccounts")})).catch((e=>{s.remove(),t(e)}));const r=t=>{const{publicKey:o,index:n}=t.detail;i(`44'/148'/${n}'`),e({publicKey:o,index:n}),s.removeEventListener("account-selected",r,!1),document.body.removeChild(s)};s.addEventListener("account-selected",r,!1);const o=e=>{s.removeEventListener("account-selected",r,!1),s.removeEventListener("account-selector-closed",o,!1),document.body.removeChild(s),t(e.detail)};s.addEventListener("account-selector-closed",o,!1)}))}async signTransaction(t,r){await this.runChecks();const o=await this.transport(),a=new e(o);let i,l;if(r?.path){i=r.path;const e=await a.getPublicKey(i);l=u.encodeEd25519PublicKey(e.rawPublicKey)}else if(r?.address){const e=(await s(c)).find((e=>e.publicKey===r.address));if(!e)throw new Error("This address has not been loaded from this ledger");i=`44'/148'/${e.index}'`,l=e.publicKey}else{if(i=await s(n),!i)throw new Error("There is no path available, please call the `getAddress` method first.");const e=await a.getPublicKey(i);l=u.encodeEd25519PublicKey(e.rawPublicKey)}const p=r?.networkPassphrase||await s(d);if(!p)throw new Error("You need to provide or set a network passphrase");const w=new h(t,p),g=r?.nonBlindTx?await a.signTransaction(i,w.signatureBase()):await a.signHash(i,w.hash());return w.addSignature(l,g.signature.toString("base64")),{signedTxXdr:w.toXDR(),signerAddress:l}}async signAuthEntry(){throw{code:-3,message:'Ledger Wallets do not support the "signAuthEntry" function'}}async signMessage(){throw{code:-3,message:'Ledger Wallets do not support the "signMessage" function'}}async getNetwork(){throw{code:-3,message:'Ledger Wallets do not support the "getNetwork" function'}}}export{w as LEDGER_ID,g as LedgerModule};
//# sourceMappingURL=ledger.module.js.map
