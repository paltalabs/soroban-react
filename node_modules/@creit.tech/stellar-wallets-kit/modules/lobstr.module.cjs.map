{"version":3,"file":"lobstr.module.cjs","sources":["../../src/modules/lobstr.module.ts"],"sourcesContent":["import { isConnected, getPublicKey, signTransaction } from '@lobstrco/signer-extension-api';\nimport { ModuleInterface, ModuleType } from '../types';\nimport { parseError } from '../utils';\n\nexport const LOBSTR_ID = 'lobstr';\n\nexport class LobstrModule implements ModuleInterface {\n  moduleType: ModuleType = ModuleType.HOT_WALLET;\n\n  productId: string = LOBSTR_ID;\n  productName: string = 'LOBSTR';\n  productUrl: string = 'https://lobstr.co';\n  productIcon: string = 'https://stellar.creit.tech/wallet-icons/lobstr.png';\n\n  async isAvailable(): Promise<boolean> {\n    return isConnected();\n  }\n\n  async getAddress(): Promise<{ address: string }> {\n    const runChecks = async () => {\n      if (!(await isConnected())) {\n        throw new Error(`Lobstr is not connected`);\n      }\n    };\n\n    return runChecks()\n      .then(() => getPublicKey())\n      .then(address => ({ address }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signTransaction(\n    xdr: string,\n    opts?: {\n      networkPassphrase?: string;\n      address?: string;\n      path?: string;\n      submit?: boolean;\n      submitUrl?: string;\n    }\n  ): Promise<{ signedTxXdr: string; signerAddress?: string }> {\n    const runChecks = async () => {\n      if (!(await isConnected())) {\n        throw new Error(`Lobstr is not connected`);\n      }\n\n      if (opts?.address) {\n        console.warn(`Lobstr doesn't allow specifying what public key should sign the transaction, we skip the value`);\n      }\n\n      if (opts?.networkPassphrase) {\n        console.warn(`Lobstr doesn't allow specifying the network that should be used, we skip the value`);\n      }\n    };\n\n    return runChecks()\n      .then(() => signTransaction(xdr))\n      .then(signedTxXdr => ({ signedTxXdr }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signAuthEntry(): Promise<{ signedAuthEntry: string; signerAddress?: string }> {\n    throw {\n      code: -3,\n      message: 'Lobstr does not support the \"signAuthEntry\" function',\n    };\n  }\n\n  async signMessage(): Promise<{ signedMessage: string; signerAddress?: string }> {\n    throw {\n      code: -3,\n      message: 'Lobstr does not support the \"signMessage\" function',\n    };\n  }\n\n  async getNetwork(): Promise<{ network: string; networkPassphrase: string }> {\n    throw {\n      code: -3,\n      message: 'Lobstr does not support the \"getNetwork\" function',\n    };\n  }\n}\n"],"names":["LOBSTR_ID","constructor","this","moduleType","ModuleType","HOT_WALLET","productId","productName","productUrl","productIcon","isAvailable","isConnected","getAddress","async","Error","runChecks","then","getPublicKey","address","catch","e","parseError","signTransaction","xdr","opts","console","warn","networkPassphrase","signedTxXdr","signAuthEntry","code","message","signMessage","getNetwork"],"mappings":"iHAIO,MAAMA,EAAY,kDAElB,MAAA,WAAAC,GACLC,KAAAC,WAAyBC,EAAAA,WAAWC,WAEhBH,KAAAI,UAAAN,EACEE,KAAAK,YAAA,SACDL,KAAAM,WAAA,oBACCN,KAAAO,YAAA,oDAAA,CAEtB,iBAAMC,GACJ,OAAOC,eAAY,CAGrB,gBAAMC,GAOJ,MANkBC,WACZ,UAAQF,EAAAA,cACJ,MAAA,IAAIG,MAAM,0BAAyB,EAItCC,GACJC,MAAK,IAAMC,mBACXD,MAAKE,IAAA,CAAcA,cACnBC,OAAWC,IACV,MAAMC,EAAAA,WAAWD,EAAC,GACnB,CAGL,qBAAME,CACJC,EACAC,GAsBA,MAdkBX,WACZ,UAAQF,EAAAA,cACJ,MAAA,IAAIG,MAAM,2BAGdU,GAAMN,SACRO,QAAQC,KAAK,kGAGXF,GAAMG,mBACRF,QAAQC,KAAK,qFAAoF,EAI9FX,GACJC,MAAK,IAAMM,EAAAA,gBAAgBC,KAC3BP,WAAuBY,kBACvBT,OAAWC,IACV,MAAMC,EAAAA,WAAWD,EAAC,GACnB,CAGL,mBAAMS,GACE,KAAA,CACJC,MAAM,EACNC,QAAS,uDACX,CAGF,iBAAMC,GACE,KAAA,CACJF,MAAM,EACNC,QAAS,qDACX,CAGF,gBAAME,GACE,KAAA,CACJH,MAAM,EACNC,QAAS,oDACX"}