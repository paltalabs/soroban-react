{"version":3,"file":"hana.module.cjs","sources":["../../src/modules/hana.module.ts"],"sourcesContent":["import { ModuleInterface, ModuleType } from '../types';\nimport { parseError } from '../utils';\n\ninterface SignTransactionProps {\n  xdr: string;\n  accountToSign?: string;\n  networkPassphrase?: string;\n}\n\ninterface SignBlobProps {\n  blob: string;\n  accountToSign: string;\n}\n\ninterface SignAuthEntryProps {\n  xdr: string;\n  accountToSign?: string;\n}\n\ninterface SignMessageProps {\n  message: string;\n  accountToSign?: string;\n}\n\ndeclare const window: Window & {\n  hanaWallet?: {\n    stellar?: {\n      getPublicKey(): Promise<string>;\n      signTransaction({ xdr, accountToSign, networkPassphrase }: SignTransactionProps): Promise<string>;\n      signBlob({ blob, accountToSign }: SignBlobProps): Promise<string>;\n      signAuthEntry({ xdr, accountToSign }: SignAuthEntryProps): Promise<string>;\n      signMessage({ message, accountToSign }: SignMessageProps): Promise<string>;\n    };\n  };\n};\n\nexport const HANA_ID = 'hana';\n\nexport class HanaModule implements ModuleInterface {\n  moduleType: ModuleType = ModuleType.HOT_WALLET;\n\n  productId: string = HANA_ID;\n  productName: string = 'Hana Wallet';\n  productUrl: string = 'https://hanawallet.io/';\n  productIcon: string = 'https://stellar.creit.tech/wallet-icons/hana.png';\n\n  async runChecks(): Promise<void> {\n    if (!(await this.isAvailable())) {\n      throw new Error('Hana Wallet is not installed');\n    }\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return typeof window !== 'undefined' && !!window.hanaWallet?.stellar;\n  }\n\n  async getAddress(): Promise<{ address: string }> {\n    return this.runChecks()\n      .then(() => window.hanaWallet!.stellar!.getPublicKey())\n      .then(address => ({ address }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signTransaction(\n    xdr: string,\n    opts?: {\n      networkPassphrase?: string;\n      address?: string;\n      path?: string;\n      submit?: boolean;\n      submitUrl?: string;\n    }\n  ): Promise<{ signedTxXdr: string; signerAddress?: string }> {\n    return this.runChecks()\n      .then(() =>\n        window.hanaWallet!.stellar!.signTransaction({\n          xdr,\n          accountToSign: opts?.address,\n          networkPassphrase: opts?.networkPassphrase,\n        })\n      )\n      .then(signedTxXdr => ({ signedTxXdr, signerAddress: opts?.address }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signAuthEntry(\n    authEntry: string,\n    opts?: {\n      networkPassphrase?: string;\n      address?: string;\n      path?: string;\n    }\n  ): Promise<{ signedAuthEntry: string; signerAddress?: string }> {\n    return this.runChecks()\n      .then(() =>\n        window.hanaWallet!.stellar!.signAuthEntry({\n          xdr: authEntry,\n          accountToSign: opts?.address,\n        })\n      )\n      .then(signedAuthEntry => ({ signedAuthEntry, signerAddress: opts?.address }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signMessage(\n    message: string,\n    opts?: {\n      address?: string;\n    }\n  ): Promise<{ signedMessage: string; signerAddress?: string }> {\n    return this.runChecks()\n      .then(() =>\n        window.hanaWallet!.stellar!.signMessage({\n          message,\n          accountToSign: opts?.address,\n        })\n      )\n      .then(signedMessage => ({ signedMessage, signerAddress: opts?.address }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async getNetwork(): Promise<{ network: string; networkPassphrase: string }> {\n    throw {\n      code: -3,\n      message: 'Hana does not support the \"getNetwork\" function',\n    };\n  }\n}\n"],"names":["HANA_ID","constructor","this","moduleType","ModuleType","HOT_WALLET","productId","productName","productUrl","productIcon","runChecks","isAvailable","Error","window","hanaWallet","stellar","getAddress","then","getPublicKey","address","catch","e","parseError","signTransaction","xdr","opts","accountToSign","networkPassphrase","signedTxXdr","signerAddress","signAuthEntry","authEntry","signedAuthEntry","signMessage","message","signedMessage","getNetwork","code"],"mappings":"qEAoCO,MAAMA,EAAU,4CAEhB,MAAA,WAAAC,GACLC,KAAAC,WAAyBC,EAAAA,WAAWC,WAEhBH,KAAAI,UAAAN,EACEE,KAAAK,YAAA,cACDL,KAAAM,WAAA,yBACCN,KAAAO,YAAA,kDAAA,CAEtB,eAAMC,GACJ,UAAYR,KAAKS,cACT,MAAA,IAAIC,MAAM,+BAClB,CAGF,iBAAMD,GACJ,MAAyB,oBAAXE,UAA4BA,OAAOC,YAAYC,OAAA,CAG/D,gBAAMC,GACJ,OAAOd,KAAKQ,YACTO,MAAK,IAAMJ,OAAOC,WAAYC,QAASG,iBACvCD,MAAiBE,KAAEA,cACnBC,OAAWC,IACV,MAAMC,EAAAA,WAAWD,EAAC,GACnB,CAGL,qBAAME,CACJC,EACAC,GAQO,OAAAvB,KAAKQ,YACTO,MAAK,IACJJ,OAAOC,WAAYC,QAASQ,gBAAgB,CAC1CC,MACAE,cAAeD,GAAMN,QACrBQ,kBAAmBF,GAAME,sBAG5BV,MAAKW,IAAgB,CAAEA,cAAaC,cAAeJ,GAAMN,YACzDC,OAAWC,IACV,MAAMC,EAAAA,WAAWD,EAAC,GACnB,CAGL,mBAAMS,CACJC,EACAN,GAMO,OAAAvB,KAAKQ,YACTO,MAAK,IACJJ,OAAOC,WAAYC,QAASe,cAAc,CACxCN,IAAKO,EACLL,cAAeD,GAAMN,YAGxBF,MAAKe,IAAoB,CAAEA,kBAAiBH,cAAeJ,GAAMN,YACjEC,OAAWC,IACV,MAAMC,EAAAA,WAAWD,EAAC,GACnB,CAGL,iBAAMY,CACJC,EACAT,GAIO,OAAAvB,KAAKQ,YACTO,MAAK,IACJJ,OAAOC,WAAYC,QAASkB,YAAY,CACtCC,UACAR,cAAeD,GAAMN,YAGxBF,MAAKkB,IAAkB,CAAEA,gBAAeN,cAAeJ,GAAMN,YAC7DC,OAAWC,IACV,MAAMC,EAAAA,WAAWD,EAAC,GACnB,CAGL,gBAAMe,GACE,KAAA,CACJC,MAAM,EACNH,QAAS,kDACX"}