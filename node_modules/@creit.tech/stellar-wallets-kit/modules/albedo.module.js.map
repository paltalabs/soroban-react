{"version":3,"file":"albedo.module.js","sources":["../../src/modules/albedo.module.ts"],"sourcesContent":["import albedo from '@albedo-link/intent';\n\nimport { ModuleInterface, ModuleType, WalletNetwork } from '../types';\nimport { parseError } from '../utils';\n\nexport const ALBEDO_ID = 'albedo';\n\nexport class AlbedoModule implements ModuleInterface {\n  moduleType: ModuleType = ModuleType.HOT_WALLET;\n\n  productId: string = ALBEDO_ID;\n  productName: string = 'Albedo';\n  productUrl: string = 'https://albedo.link/';\n  productIcon: string = 'https://stellar.creit.tech/wallet-icons/albedo.png';\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  async getAddress(): Promise<{ address: string }> {\n    return albedo\n      .publicKey({})\n      .then(result => ({ address: result.pubkey }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signTransaction(\n    xdr: string,\n    opts?: {\n      networkPassphrase?: string;\n      address?: string;\n      path?: string;\n      submit?: boolean;\n      submitUrl?: string;\n    }\n  ): Promise<{ signedTxXdr: string; signerAddress?: string }> {\n    return albedo\n      .tx({\n        xdr,\n        pubkey: opts?.address,\n        network: opts?.networkPassphrase\n          ? opts.networkPassphrase === WalletNetwork.PUBLIC\n            ? AlbedoNetwork.PUBLIC\n            : AlbedoNetwork.TESTNET\n          : undefined,\n      })\n      .then(({ signed_envelope_xdr }) => ({\n        signedTxXdr: signed_envelope_xdr,\n        signerAddress: opts?.address,\n      }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signAuthEntry(): Promise<{ signedAuthEntry: string; signerAddress?: string }> {\n    throw {\n      code: -3,\n      message: 'Albedo does not support the \"signAuthEntry\" function',\n    };\n  }\n\n  /**\n   * We understand that Albedo has a method to sign a message, but that method is not compatible with SEP-0043\n   */\n  async signMessage(): Promise<{ signedMessage: string; signerAddress?: string }> {\n    throw {\n      code: -3,\n      message: 'Albedo does not support the \"signMessage\" function',\n    };\n  }\n\n  async getNetwork(): Promise<{ network: string; networkPassphrase: string }> {\n    throw {\n      code: -3,\n      message: 'Albedo does not support the \"getNetwork\" function',\n    };\n  }\n}\n\nexport enum AlbedoNetwork {\n  PUBLIC = 'public',\n  TESTNET = 'testnet',\n}\n"],"names":["ALBEDO_ID","AlbedoModule","constructor","this","moduleType","ModuleType","HOT_WALLET","productId","productName","productUrl","productIcon","isAvailable","getAddress","albedo","publicKey","then","result","address","pubkey","catch","e","parseError","signTransaction","xdr","opts","tx","network","networkPassphrase","WalletNetwork","PUBLIC","signed_envelope_xdr","signedTxXdr","signerAddress","signAuthEntry","code","message","signMessage","getNetwork","AlbedoNetwork"],"mappings":"wIAKO,MAAMA,EAAY,SAElB,MAAMC,EAAN,WAAAC,GACLC,KAAAC,WAAyBC,EAAWC,WAEhBH,KAAAI,UAAAP,EACEG,KAAAK,YAAA,SACDL,KAAAM,WAAA,uBACCN,KAAAO,YAAA,oDAAA,CAEtB,iBAAMC,GACG,OAAA,CAAA,CAGT,gBAAMC,GACJ,OAAOC,EACJC,UAAU,CAAE,GACZC,MAAKC,IAAA,CAAaC,QAASD,EAAOE,WAClCC,OAAWC,IACV,MAAMC,EAAWD,EAAC,GACnB,CAGL,qBAAME,CACJC,EACAC,GAQA,OAAOX,EACJY,GAAG,CACFF,MACAL,OAAQM,GAAMP,QACdS,QAASF,GAAMG,kBACXH,EAAKG,oBAAsBC,EAAcC,OACvC,SACA,eACF,IAELd,MAAK,EAAGe,0BAA2B,CAClCC,YAAaD,EACbE,cAAeR,GAAMP,YAEtBE,OAAWC,IACV,MAAMC,EAAWD,EAAC,GACnB,CAGL,mBAAMa,GACE,KAAA,CACJC,MAAM,EACNC,QAAS,uDACX,CAMF,iBAAMC,GACE,KAAA,CACJF,MAAM,EACNC,QAAS,qDACX,CAGF,gBAAME,GACE,KAAA,CACJH,MAAM,EACNC,QAAS,oDACX,EAIQ,IAAAG,GAAAA,IACVA,EAAS,OAAA,SACTA,EAAU,QAAA,UAFAA,IAAAA,GAAA,CAAA"}