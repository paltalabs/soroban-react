import{ModuleType as s}from"../types.js";import{parseError as t}from"../utils.js";const e="hana";class n{constructor(){this.moduleType=s.HOT_WALLET,this.productId=e,this.productName="Hana Wallet",this.productUrl="https://hanawallet.io/",this.productIcon="https://stellar.creit.tech/wallet-icons/hana.png"}async runChecks(){if(!await this.isAvailable())throw new Error("Hana Wallet is not installed")}async isAvailable(){return"undefined"!=typeof window&&!!window.hanaWallet?.stellar}async getAddress(){return this.runChecks().then((()=>window.hanaWallet.stellar.getPublicKey())).then((s=>({address:s}))).catch((s=>{throw t(s)}))}async signTransaction(s,e){return this.runChecks().then((()=>window.hanaWallet.stellar.signTransaction({xdr:s,accountToSign:e?.address,networkPassphrase:e?.networkPassphrase}))).then((s=>({signedTxXdr:s,signerAddress:e?.address}))).catch((s=>{throw t(s)}))}async signAuthEntry(s,e){return this.runChecks().then((()=>window.hanaWallet.stellar.signAuthEntry({xdr:s,accountToSign:e?.address}))).then((s=>({signedAuthEntry:s,signerAddress:e?.address}))).catch((s=>{throw t(s)}))}async signMessage(s,e){return this.runChecks().then((()=>window.hanaWallet.stellar.signMessage({message:s,accountToSign:e?.address}))).then((s=>({signedMessage:s,signerAddress:e?.address}))).catch((s=>{throw t(s)}))}async getNetwork(){throw{code:-3,message:'Hana does not support the "getNetwork" function'}}}export{e as HANA_ID,n as HanaModule};
//# sourceMappingURL=hana.module.js.map
