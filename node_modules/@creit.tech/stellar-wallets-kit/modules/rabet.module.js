import{ModuleType as t,WalletNetwork as e}from"../types.js";import{parseError as s}from"../utils.js";const n="rabet";class r{constructor(){this.moduleType=t.HOT_WALLET,this.productId=n,this.productName="Rabet",this.productUrl="https://rabet.io/",this.productIcon="https://stellar.creit.tech/wallet-icons/rabet.png"}async isAvailable(){return"undefined"!=typeof window&&!!window.rabet}async getAddress(){return(async()=>{if(!await this.isAvailable())throw new Error("Rabet is not installed")})().then((()=>window.rabet.connect())).then((({publicKey:t})=>({address:t}))).catch((t=>{throw s(t)}))}async signTransaction(t,n){return(async()=>{if(!await this.isAvailable())throw new Error("Rabet is not installed");if(n?.address&&n.networkPassphrase!==e.PUBLIC&&n.networkPassphrase!==e.TESTNET)throw new Error(`Rabet doesn't support the network: ${n.networkPassphrase}`);n?.address&&console.warn("Rabet doesn't allow specifying the network that should be used, we skip the value")})().then((async()=>window.rabet.sign(t,n?.networkPassphrase===e.PUBLIC?"mainnet":"testnet"))).then((t=>({signedTxXdr:t?.xdr}))).catch((t=>{throw s(t)}))}async signAuthEntry(){throw{code:-3,message:'Rabet does not support the "signAuthEntry" function'}}async signMessage(){throw{code:-3,message:'Rabet does not support the "signMessage" function'}}async getNetwork(){throw{code:-3,message:'Rabet does not support the "getNetwork" function'}}}var a=(t=>(t.PUBLIC="mainnet",t.TESTNET="testnet",t))(a||{});export{n as RABET_ID,r as RabetModule,a as RabetNetwork};
//# sourceMappingURL=rabet.module.js.map
