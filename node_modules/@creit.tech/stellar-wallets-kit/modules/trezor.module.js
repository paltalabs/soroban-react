import e from"@trezor/connect-web";import{transformTransaction as t}from"@trezor/connect-plugin-stellar";import{Transaction as r}from"@stellar/stellar-base";import{firstValueFrom as s}from"rxjs";import{removeMnemonicPath as o,removeHardwareWalletPaths as a,mnemonicPath$ as n,setHardwareWalletPaths as i,setMnemonicPath as c,hardwareWalletPaths$ as d,selectedNetwork$ as l}from"../state/store.js";import{ModuleType as h}from"../types.js";import{parseError as p}from"../utils.js";const u="TREZOR";class w{constructor(t){this.TrezorConnect="default"in e?e.default:e,this._isAvailable=!1,this.moduleType=h.HW_WALLET,this.productId=u,this.productName="Trezor",this.productUrl="https://www.trezor.com/",this.productIcon="https://stellar.creit.tech/wallet-icons/trezor.png",this.TrezorConnect.init({manifest:{appUrl:t.appUrl,email:t.email},debug:t.debug||!1,lazyLoad:t.lazyLoad||!1,coreMode:t.coreMode||"auto"}).then((()=>{console.log("Trezor is ready"),this._isAvailable=!0}))}async disconnect(){o(),a()}async isAvailable(){return!0}async runChecks(){if(!this._isAvailable)throw p(new Error("Trezor connection has not been started yet."))}async getAddress(e){try{await this.runChecks();const t=e?.path||await s(n);if(t){const e=await this.TrezorConnect.stellarGetAddress({path:t,showOnTrezor:!1});if(!e.success)throw p(new Error(e.payload.error));return{address:e.payload.address}}return{address:(await this.openAccountSelector()).publicKey}}catch(e){throw p(e)}}async getAddresses(e=0){const t=10*e,r=new Array(10).fill(void 0).map(((e,r)=>({path:`m/44'/148'/${r+t}'`,showOnTrezor:!1}))),s=await this.TrezorConnect.stellarGetAddress({bundle:r});if(!s.success)throw p(new Error(s.payload.error));const o=s.payload.map(((e,r)=>({publicKey:e.address,index:r+t})));return i(o),o}async openAccountSelector(){return new Promise(((e,t)=>{const r=document.createElement("stellar-accounts-selector");r.setAttribute("showModal",""),r.setAttribute("loadingAccounts",""),document.body.appendChild(r),this.getAddresses().then((e=>{r.setAttribute("accounts",JSON.stringify(e)),r.removeAttribute("loadingAccounts")})).catch((e=>{r.remove(),t(e)}));const s=t=>{const{publicKey:o,index:a}=t.detail;c(`44'/148'/${a}'`),e({publicKey:o,index:a}),r.removeEventListener("account-selected",s,!1),document.body.removeChild(r)};r.addEventListener("account-selected",s,!1);const o=e=>{r.removeEventListener("account-selected",s,!1),r.removeEventListener("account-selector-closed",o,!1),document.body.removeChild(r),t(e.detail)};r.addEventListener("account-selector-closed",o,!1)}))}async signTransaction(e,o){let a,i;if(await this.runChecks(),o?.path){a=o.path;const e=await this.TrezorConnect.stellarGetAddress({path:a,showOnTrezor:!1});if(!e.success)throw new Error(e.payload.error);i=e.payload.address}else if(o?.address){const e=(await s(d)).find((e=>e.publicKey===o.address));if(!e)throw p(new Error("This address has not been loaded from this device"));a=`m/44'/148'/${e.index}'`,i=e.publicKey}else{if(a=await s(n),!a)throw p(new Error("There is no path available, please call the `getAddress` method first."));const e=await this.TrezorConnect.stellarGetAddress({path:a,showOnTrezor:!1});if(!e.success)throw new Error(e.payload.error);i=e.payload.address}const c=o?.networkPassphrase||await s(l);if(!c)throw p(new Error("You need to provide or set a network passphrase"));const h=new r(e,c),u=t(a,h),w=await this.TrezorConnect.stellarSignTransaction(u);if(!w.success)throw p(new Error(w.payload.error));return h.addSignature(i,Buffer.from(w.payload.signature,"hex").toString("base64")),{signedTxXdr:h.toXDR(),signerAddress:i}}async signAuthEntry(){throw{code:-3,message:'Trezor Wallets do not support the "signAuthEntry" method'}}async signMessage(){throw{code:-3,message:'Trezor Wallets do not support the "signMessage" method'}}async getNetwork(){throw{code:-3,message:'Trezor Wallets do not support the "getNetwork" method'}}}export{u as TREZOR_ID,w as TrezorModule};
//# sourceMappingURL=trezor.module.js.map
