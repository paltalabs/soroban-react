import{isConnected as t,getPublicKey as s,signTransaction as o}from"@lobstrco/signer-extension-api";import{ModuleType as e}from"../types.js";import{parseError as r}from"../utils.js";const n="lobstr";class c{constructor(){this.moduleType=e.HOT_WALLET,this.productId=n,this.productName="LOBSTR",this.productUrl="https://lobstr.co",this.productIcon="https://stellar.creit.tech/wallet-icons/lobstr.png"}async isAvailable(){return t()}async getAddress(){return(async()=>{if(!await t())throw new Error("Lobstr is not connected")})().then((()=>s())).then((t=>({address:t}))).catch((t=>{throw r(t)}))}async signTransaction(s,e){return(async()=>{if(!await t())throw new Error("Lobstr is not connected");e?.address&&console.warn("Lobstr doesn't allow specifying what public key should sign the transaction, we skip the value"),e?.networkPassphrase&&console.warn("Lobstr doesn't allow specifying the network that should be used, we skip the value")})().then((()=>o(s))).then((t=>({signedTxXdr:t}))).catch((t=>{throw r(t)}))}async signAuthEntry(){throw{code:-3,message:'Lobstr does not support the "signAuthEntry" function'}}async signMessage(){throw{code:-3,message:'Lobstr does not support the "signMessage" function'}}async getNetwork(){throw{code:-3,message:'Lobstr does not support the "getNetwork" function'}}}export{n as LOBSTR_ID,c as LobstrModule};
//# sourceMappingURL=lobstr.module.js.map
