{"version":3,"file":"rabet.module.js","sources":["../../src/modules/rabet.module.ts"],"sourcesContent":["import { ModuleInterface, ModuleType, WalletNetwork } from '../types';\nimport { parseError } from '../utils';\n\ndeclare const window: Window &\n  typeof globalThis & {\n    rabet?: {\n      connect: () => Promise<{ publicKey: string }>;\n      sign: (xdr: string, network: RabetNetwork) => Promise<{ xdr: string }>;\n    };\n  };\n\nexport const RABET_ID = 'rabet';\n\nexport class RabetModule implements ModuleInterface {\n  moduleType: ModuleType = ModuleType.HOT_WALLET;\n\n  productId: string = RABET_ID;\n  productName: string = 'Rabet';\n  productUrl: string = 'https://rabet.io/';\n  productIcon: string = 'https://stellar.creit.tech/wallet-icons/rabet.png';\n\n  async isAvailable(): Promise<boolean> {\n    return typeof window !== 'undefined' && !!window.rabet;\n  }\n\n  async getAddress(): Promise<{ address: string }> {\n    const runChecks = async () => {\n      if (!(await this.isAvailable())) {\n        throw new Error('Rabet is not installed');\n      }\n    };\n\n    return runChecks()\n      .then(() => window.rabet!.connect())\n      .then(({ publicKey }) => ({ address: publicKey }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signTransaction(\n    xdr: string,\n    opts?: {\n      networkPassphrase?: string;\n      address?: string;\n      path?: string;\n      submit?: boolean;\n      submitUrl?: string;\n    }\n  ): Promise<{ signedTxXdr: string; signerAddress?: string }> {\n    const runChecks = async () => {\n      if (!(await this.isAvailable())) {\n        throw new Error('Rabet is not installed');\n      }\n\n      if (\n        opts?.address &&\n        opts.networkPassphrase !== WalletNetwork.PUBLIC &&\n        opts.networkPassphrase !== WalletNetwork.TESTNET\n      ) {\n        throw new Error(`Rabet doesn't support the network: ${opts.networkPassphrase}`);\n      }\n\n      if (opts?.address) {\n        console.warn(`Rabet doesn't allow specifying the network that should be used, we skip the value`);\n      }\n    };\n\n    const sign = async () =>\n      window.rabet!.sign(\n        xdr,\n        opts?.networkPassphrase === WalletNetwork.PUBLIC ? RabetNetwork.PUBLIC : RabetNetwork.TESTNET\n      );\n\n    return runChecks()\n      .then(sign)\n      .then(result => ({ signedTxXdr: result?.xdr }))\n      .catch(e => {\n        throw parseError(e);\n      });\n  }\n\n  async signAuthEntry(): Promise<{ signedAuthEntry: string; signerAddress?: string }> {\n    throw {\n      code: -3,\n      message: 'Rabet does not support the \"signAuthEntry\" function',\n    };\n  }\n\n  async signMessage(): Promise<{ signedMessage: string; signerAddress?: string }> {\n    throw {\n      code: -3,\n      message: 'Rabet does not support the \"signMessage\" function',\n    };\n  }\n\n  async getNetwork(): Promise<{ network: string; networkPassphrase: string }> {\n    throw {\n      code: -3,\n      message: 'Rabet does not support the \"getNetwork\" function',\n    };\n  }\n}\n\nexport enum RabetNetwork {\n  PUBLIC = 'mainnet',\n  TESTNET = 'testnet',\n}\n"],"names":["RABET_ID","RabetModule","constructor","this","moduleType","ModuleType","HOT_WALLET","productId","productName","productUrl","productIcon","isAvailable","window","rabet","getAddress","async","Error","runChecks","then","connect","publicKey","address","catch","e","parseError","signTransaction","xdr","opts","networkPassphrase","WalletNetwork","PUBLIC","TESTNET","console","warn","sign","result","signedTxXdr","signAuthEntry","code","message","signMessage","getNetwork","RabetNetwork"],"mappings":"qGAWO,MAAMA,EAAW,QAEjB,MAAMC,EAAN,WAAAC,GACLC,KAAAC,WAAyBC,EAAWC,WAEhBH,KAAAI,UAAAP,EACEG,KAAAK,YAAA,QACDL,KAAAM,WAAA,oBACCN,KAAAO,YAAA,mDAAA,CAEtB,iBAAMC,GACJ,MAAyB,oBAAXC,UAA4BA,OAAOC,KAAA,CAGnD,gBAAMC,GAOG,MANWC,WAChB,UAAYZ,KAAKQ,cACT,MAAA,IAAIK,MAAM,yBAAwB,EAIrCC,GACJC,MAAK,IAAMN,OAAOC,MAAOM,YACzBD,MAAK,EAAGE,gBAAiB,CAAEC,QAASD,MACpCE,OAAWC,IACV,MAAMC,EAAWD,EAAC,GACnB,CAGL,qBAAME,CACJC,EACAC,GAgCA,MAxBkBZ,WAChB,UAAYZ,KAAKQ,cACT,MAAA,IAAIK,MAAM,0BAIhB,GAAAW,GAAMN,SACNM,EAAKC,oBAAsBC,EAAcC,QACzCH,EAAKC,oBAAsBC,EAAcE,QAEzC,MAAM,IAAIf,MAAM,sCAAsCW,EAAKC,qBAGzDD,GAAMN,SACRW,QAAQC,KAAK,oFAAmF,EAU7FhB,GACJC,MAPUH,SACXH,OAAOC,MAAOqB,KACZR,EACAC,GAAMC,oBAAsBC,EAAcC,OAAS,UAAsB,aAK1EZ,MAAKiB,IAAA,CAAaC,YAAaD,GAAQT,QACvCJ,OAAWC,IACV,MAAMC,EAAWD,EAAC,GACnB,CAGL,mBAAMc,GACE,KAAA,CACJC,MAAM,EACNC,QAAS,sDACX,CAGF,iBAAMC,GACE,KAAA,CACJF,MAAM,EACNC,QAAS,oDACX,CAGF,gBAAME,GACE,KAAA,CACJH,MAAM,EACNC,QAAS,mDACX,EAIQ,IAAAG,GAAAA,IACVA,EAAS,OAAA,UACTA,EAAU,QAAA,UAFAA,IAAAA,GAAA,CAAA"}