"use strict";var t=require("@lobstrco/signer-extension-api"),s=require("../types.cjs"),e=require("../utils.cjs");const o="lobstr";exports.LOBSTR_ID=o,exports.LobstrModule=class{constructor(){this.moduleType=s.ModuleType.HOT_WALLET,this.productId=o,this.productName="LOBSTR",this.productUrl="https://lobstr.co",this.productIcon="https://stellar.creit.tech/wallet-icons/lobstr.png"}async isAvailable(){return t.isConnected()}async getAddress(){return(async()=>{if(!await t.isConnected())throw new Error("Lobstr is not connected")})().then((()=>t.getPublicKey())).then((t=>({address:t}))).catch((t=>{throw e.parseError(t)}))}async signTransaction(s,o){return(async()=>{if(!await t.isConnected())throw new Error("Lobstr is not connected");o?.address&&console.warn("Lobstr doesn't allow specifying what public key should sign the transaction, we skip the value"),o?.networkPassphrase&&console.warn("Lobstr doesn't allow specifying the network that should be used, we skip the value")})().then((()=>t.signTransaction(s))).then((t=>({signedTxXdr:t}))).catch((t=>{throw e.parseError(t)}))}async signAuthEntry(){throw{code:-3,message:'Lobstr does not support the "signAuthEntry" function'}}async signMessage(){throw{code:-3,message:'Lobstr does not support the "signMessage" function'}}async getNetwork(){throw{code:-3,message:'Lobstr does not support the "getNetwork" function'}}};
//# sourceMappingURL=lobstr.module.cjs.map
