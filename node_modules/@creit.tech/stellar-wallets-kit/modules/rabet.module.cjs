"use strict";var t=require("../types.cjs"),e=require("../utils.cjs");const s="rabet";var r=(t=>(t.PUBLIC="mainnet",t.TESTNET="testnet",t))(r||{});exports.RABET_ID=s,exports.RabetModule=class{constructor(){this.moduleType=t.ModuleType.HOT_WALLET,this.productId=s,this.productName="Rabet",this.productUrl="https://rabet.io/",this.productIcon="https://stellar.creit.tech/wallet-icons/rabet.png"}async isAvailable(){return"undefined"!=typeof window&&!!window.rabet}async getAddress(){return(async()=>{if(!await this.isAvailable())throw new Error("Rabet is not installed")})().then((()=>window.rabet.connect())).then((({publicKey:t})=>({address:t}))).catch((t=>{throw e.parseError(t)}))}async signTransaction(s,r){return(async()=>{if(!await this.isAvailable())throw new Error("Rabet is not installed");if(r?.address&&r.networkPassphrase!==t.WalletNetwork.PUBLIC&&r.networkPassphrase!==t.WalletNetwork.TESTNET)throw new Error(`Rabet doesn't support the network: ${r.networkPassphrase}`);r?.address&&console.warn("Rabet doesn't allow specifying the network that should be used, we skip the value")})().then((async()=>window.rabet.sign(s,r?.networkPassphrase===t.WalletNetwork.PUBLIC?"mainnet":"testnet"))).then((t=>({signedTxXdr:t?.xdr}))).catch((t=>{throw e.parseError(t)}))}async signAuthEntry(){throw{code:-3,message:'Rabet does not support the "signAuthEntry" function'}}async signMessage(){throw{code:-3,message:'Rabet does not support the "signMessage" function'}}async getNetwork(){throw{code:-3,message:'Rabet does not support the "getNetwork" function'}}},exports.RabetNetwork=r;
//# sourceMappingURL=rabet.module.cjs.map
