import{WalletConnectModal as t}from"@walletconnect/modal";import{SignClient as e}from"@walletconnect/sign-client";import{ModuleType as n,WalletNetwork as s}from"../types.js";import{parseError as o}from"../utils.js";const i=t=>{const e=t.namespaces.stellar.accounts.map((t=>({network:t.split(":")[1],publicKey:t.split(":")[2]})));return{id:t.topic,name:t.peer.metadata.name,description:t.peer.metadata.description,url:t.peer.metadata.url,icons:t.peer.metadata.icons[0],accounts:e}},r="wallet_connect";class a{constructor(s){this.wcParams=s,this.moduleType=n.BRIDGE_WALLET,this.productId=r,this.productName="Wallet Connect",this.productUrl="https://walletconnect.com/",this.productIcon="https://stellar.creit.tech/wallet-icons/walletconnect.png",s.sessionId&&this.setSession(s.sessionId),s.client&&s.modal?(this.client=s.client,this.qrModal=s.modal):e.init({projectId:s.projectId,metadata:{name:s.name,url:s.url,description:s.description,icons:s.icons}}).then((e=>{console.log("WalletConnect is ready."),this.client=e,this.qrModal=new t({projectId:s.projectId}),s.onSessionDeleted&&this.onSessionDeleted(s.onSessionDeleted)})).catch(console.error)}async isAvailable(){return!0}async getAddress(){return(async()=>{if(!this.client)throw new Error("WalletConnect is not running yet")})().then((async()=>({address:(await this.getTargetSession()).accounts[0].publicKey}))).catch((t=>{throw o(t)}))}async signTransaction(t,e){return(async()=>{if(!this.client)throw new Error("WalletConnect is not running yet")})().then((async()=>{const n=await this.getTargetSession({publicKey:e?.address});return{signedTxXdr:await this.client.request({topic:n.id,chainId:e?.networkPassphrase===s.PUBLIC?"stellar:pubnet":"stellar:testnet",request:{method:this.wcParams.method,params:{xdr:t}}}).then((t=>t.signedXDR))}})).catch((t=>{throw o(t)}))}async signAuthEntry(){throw{code:-3,message:'WalletConnect does not support the "signAuthEntry" function'}}async signMessage(){throw{code:-3,message:'WalletConnect does not support the "signMessage" function'}}async getNetwork(){throw{code:-3,message:'WalletConnect does not support the "getNetwork" function'}}setSession(t){this.activeSession=t}onSessionDeleted(t){if(!this.client)throw new Error("WalletConnect is not running yet");this.client.on("session_delete",(e=>{t(e.topic)}))}async connectWalletConnect(){if(!this.client)throw new Error("WalletConnect is not running yet");try{const{uri:t,approval:e}=await this.client.connect({requiredNamespaces:{stellar:{methods:[this.wcParams.method],chains:[this.wcParams.network===s.PUBLIC?"stellar:pubnet":"stellar:testnet"],events:[]}}}),n=await new Promise(((n,s)=>{t&&this.qrModal.openModal({uri:t}),e().then((t=>{this.qrModal.closeModal(),n(t)})).catch((t=>{this.qrModal.closeModal(),s(t)}))})).then(i);return this.setSession(n.id),n}catch(t){throw this.qrModal.closeModal(),console.error(t),new Error("There was an error when trying to connect")}}async disconnect(){if(!this.client)throw new Error("WalletConnect is not running yet");const t=await this.getSessions();for(const e of t)await this.closeSession(e.id)}async closeSession(t,e){if(!this.client)throw new Error("WalletConnect is not running yet");await this.client.disconnect({topic:t,reason:{message:e||"Session closed",code:-1}})}async getSessions(){if(!this.client)throw new Error("WalletConnect is not running yet");return this.client.session.values.map(i)}async getTargetSession(t){let e=(await this.getSessions()).find((e=>e.id===this.activeSession||!!e.accounts.find((e=>e.publicKey===t?.publicKey))));return e||(e=await this.connectWalletConnect()),e}}var c=(t=>(t.PUBLIC="stellar:pubnet",t.TESTNET="stellar:testnet",t))(c||{}),l=(t=>(t.SIGN="stellar_signXDR",t.SIGN_AND_SUBMIT="stellar_signAndSubmitXDR",t))(l||{});export{r as WALLET_CONNECT_ID,l as WalletConnectAllowedMethods,a as WalletConnectModule,c as WalletConnectTargetChain};
//# sourceMappingURL=walletconnect.module.js.map
