"use strict";var e=require("@trezor/connect-web"),r=require("@trezor/connect-plugin-stellar"),t=require("@stellar/stellar-base"),s=require("rxjs"),o=require("../state/store.cjs"),a=require("../types.cjs"),n=require("../utils.cjs");const i="TREZOR";exports.TREZOR_ID=i,exports.TrezorModule=class{constructor(r){this.TrezorConnect="default"in e?e.default:e,this._isAvailable=!1,this.moduleType=a.ModuleType.HW_WALLET,this.productId=i,this.productName="Trezor",this.productUrl="https://www.trezor.com/",this.productIcon="https://stellar.creit.tech/wallet-icons/trezor.png",this.TrezorConnect.init({manifest:{appUrl:r.appUrl,email:r.email},debug:r.debug||!1,lazyLoad:r.lazyLoad||!1,coreMode:r.coreMode||"auto"}).then((()=>{console.log("Trezor is ready"),this._isAvailable=!0}))}async disconnect(){o.removeMnemonicPath(),o.removeHardwareWalletPaths()}async isAvailable(){return!0}async runChecks(){if(!this._isAvailable)throw n.parseError(new Error("Trezor connection has not been started yet."))}async getAddress(e){try{await this.runChecks();const r=e?.path||await s.firstValueFrom(o.mnemonicPath$);if(r){const e=await this.TrezorConnect.stellarGetAddress({path:r,showOnTrezor:!1});if(!e.success)throw n.parseError(new Error(e.payload.error));return{address:e.payload.address}}return{address:(await this.openAccountSelector()).publicKey}}catch(e){throw n.parseError(e)}}async getAddresses(e=0){const r=10*e,t=new Array(10).fill(void 0).map(((e,t)=>({path:`m/44'/148'/${t+r}'`,showOnTrezor:!1}))),s=await this.TrezorConnect.stellarGetAddress({bundle:t});if(!s.success)throw n.parseError(new Error(s.payload.error));const a=s.payload.map(((e,t)=>({publicKey:e.address,index:t+r})));return o.setHardwareWalletPaths(a),a}async openAccountSelector(){return new Promise(((e,r)=>{const t=document.createElement("stellar-accounts-selector");t.setAttribute("showModal",""),t.setAttribute("loadingAccounts",""),document.body.appendChild(t),this.getAddresses().then((e=>{t.setAttribute("accounts",JSON.stringify(e)),t.removeAttribute("loadingAccounts")})).catch((e=>{t.remove(),r(e)}));const s=r=>{const{publicKey:a,index:n}=r.detail;o.setMnemonicPath(`44'/148'/${n}'`),e({publicKey:a,index:n}),t.removeEventListener("account-selected",s,!1),document.body.removeChild(t)};t.addEventListener("account-selected",s,!1);const a=e=>{t.removeEventListener("account-selected",s,!1),t.removeEventListener("account-selector-closed",a,!1),document.body.removeChild(t),r(e.detail)};t.addEventListener("account-selector-closed",a,!1)}))}async signTransaction(e,a){let i,c;if(await this.runChecks(),a?.path){i=a.path;const e=await this.TrezorConnect.stellarGetAddress({path:i,showOnTrezor:!1});if(!e.success)throw new Error(e.payload.error);c=e.payload.address}else if(a?.address){const e=(await s.firstValueFrom(o.hardwareWalletPaths$)).find((e=>e.publicKey===a.address));if(!e)throw n.parseError(new Error("This address has not been loaded from this device"));i=`m/44'/148'/${e.index}'`,c=e.publicKey}else{if(i=await s.firstValueFrom(o.mnemonicPath$),!i)throw n.parseError(new Error("There is no path available, please call the `getAddress` method first."));const e=await this.TrezorConnect.stellarGetAddress({path:i,showOnTrezor:!1});if(!e.success)throw new Error(e.payload.error);c=e.payload.address}const d=a?.networkPassphrase||await s.firstValueFrom(o.selectedNetwork$);if(!d)throw n.parseError(new Error("You need to provide or set a network passphrase"));const l=new t.Transaction(e,d),h=r.transformTransaction(i,l),u=await this.TrezorConnect.stellarSignTransaction(h);if(!u.success)throw n.parseError(new Error(u.payload.error));return l.addSignature(c,Buffer.from(u.payload.signature,"hex").toString("base64")),{signedTxXdr:l.toXDR(),signerAddress:c}}async signAuthEntry(){throw{code:-3,message:'Trezor Wallets do not support the "signAuthEntry" method'}}async signMessage(){throw{code:-3,message:'Trezor Wallets do not support the "signMessage" method'}}async getNetwork(){throw{code:-3,message:'Trezor Wallets do not support the "getNetwork" method'}}};
//# sourceMappingURL=trezor.module.cjs.map
