"use strict";var e=require("tweetnacl"),s=require("tweetnacl-util"),t=require("./interfaces.cjs"),i=require("rxjs"),r=require("./mobile-sdk.cjs");exports.xBullWalletConnect=class{constructor(r){this.closeCurrentPromises$=new i.Subject,this.closeObservables$=new i.Subject,this.initialResponse$=new i.Subject,this.initialResponseCompleted$=new i.Subject,this.connectResponse$=new i.Subject,this.connectResult$=new i.Subject,this.signResponse$=new i.Subject,this.signResult$=new i.Subject,this.closeCurrentPromisesSubscription=i.timer(1e3,1e3).pipe(i.takeUntil(this.closeObservables$)).subscribe((()=>{this.target?.closed&&this.closeCurrentPromises$.next()})),this.onInititalResponseSubscription=this.initialResponse$.pipe(i.takeUntil(this.closeObservables$)).subscribe((e=>{const s=this.decryptFromReceiver({oneTimeCode:e.data.oneTimeCode,payload:e.data.message,senderPublicKey:e.data.publicKey});JSON.parse(s).providedSession===this.session()&&(this.targetPublicKey=e.data.publicKey,this.initialResponseCompleted$.next())})),this.onConnectResponseSubscription=this.connectResponse$.pipe(i.takeUntil(this.closeObservables$)).subscribe((e=>{if(!this.targetPublicKey)return void this.connectResult$.next({success:!1,message:"Wallet encryption public key is not provided, request rejected."});if(!e.data.success)return void this.connectResult$.next({success:!1,message:"Request rejected from the wallet"});const s=this.decryptFromReceiver({oneTimeCode:e.data.oneTimeCode,payload:e.data.message,senderPublicKey:this.targetPublicKey}),t=JSON.parse(s);this.connectResult$.next({success:!0,publicKey:t.publicKey})})),this.onSignResponseSubscription=this.signResponse$.pipe(i.takeUntil(this.closeObservables$)).subscribe((e=>{if(!this.targetPublicKey)return void this.signResult$.next({success:!1,message:"Wallet encryption public key is not provided, request rejected."});if(!e.data.success)return void this.signResult$.next({success:!1,message:"Request rejected from the wallet"});const s=this.decryptFromReceiver({oneTimeCode:e.data.oneTimeCode,payload:e.data.message,senderPublicKey:this.targetPublicKey}),t=JSON.parse(s);this.signResult$.next({success:!0,xdr:t.xdr})})),this.preferredTarget=r?.preferredTarget||"extension",this.walletUrl=r?.url||"https://wallet.xbull.app/connect";const n=e.box.keyPair(),o=s.encodeBase64(e.randomBytes(24));this.encryptForReceiver=t=>{const i=e.randomBytes(24),r=e.box(s.decodeUTF8(t.data),i,t.receiverPublicKey,n.secretKey);return{message:s.encodeBase64(r),oneTimeCode:s.encodeBase64(i)}},this.decryptFromReceiver=t=>{const i=e.box.open(s.decodeBase64(t.payload),s.decodeBase64(t.oneTimeCode),s.decodeBase64(t.senderPublicKey),n.secretKey);if(!i)throw new Error("Decrypted message is null");return s.encodeUTF8(i)},this.publicKey=()=>n.publicKey,this.session=()=>o.slice();const c=e=>{switch(e.data.type){case t.EventType.XBULL_INITIAL_RESPONSE:this.initialResponse$.next(e);break;case t.EventType.XBULL_CONNECT_RESPONSE:this.connectResponse$.next(e);break;case t.EventType.XBULL_SIGN_RESPONSE:this.signResponse$.next(e)}};window.addEventListener("message",c),this.closeObservables$.asObservable().pipe(i.take(1)).subscribe((()=>{window.removeEventListener("message",c)}))}openWallet(){return this.target&&!this.target.closed&&(this.target.close(),this.target=null,this.closeCurrentPromises$.next()),this.target=window.open(`${this.walletUrl}?public=${encodeURIComponent(s.encodeBase64(this.publicKey()))}&session=${encodeURIComponent(this.session())}`,"xBull_Wallet_app","width=380,height=640,left=100,top=100"),i.firstValueFrom(this.initialResponseCompleted$.pipe(i.takeUntil(this.closeCurrentPromises$)).pipe(i.takeUntil(this.closeObservables$)))}closeWallet(){this.target&&(this.target?.close(),this.target=null)}async connect(e={canRequestPublicKey:!0,canRequestSign:!0}){const n=window?.webkit?.messageHandlers?.cordova_iab?new r.xBullSDK:window.xBullSDK;if(n&&"extension"===this.preferredTarget){const e=await n.getAddress();if(t.isResponseError(e))throw e.error;return e.address}{if(await this.openWallet(),!this.target||!this.targetPublicKey)throw new Error("xBull Wallet is not open, we can't connect with it");const{message:r,oneTimeCode:n}=this.encryptForReceiver({data:JSON.stringify(e),receiverPublicKey:s.decodeBase64(this.targetPublicKey)}),o={type:t.EventType.XBULL_CONNECT,message:r,oneTimeCode:n};this.target.postMessage(o,"*");const c=this.connectResult$.asObservable().pipe(i.switchMap((e=>e.success?(this.closeWallet(),i.of(e.publicKey)):(this.closeWallet(),i.throwError((()=>new Error(e.message))))))).pipe(i.take(1)).pipe(i.takeUntil(this.closeCurrentPromises$)).pipe(i.takeUntil(this.closeObservables$));return i.firstValueFrom(c)}}async sign(e){const n=window?.webkit?.messageHandlers?.cordova_iab?new r.xBullSDK:window.xBullSDK;if(n&&"extension"===this.preferredTarget){const s=await n.signTransaction({xdr:e.xdr,opts:{networkPassphrase:e.network,address:e.publicKey}});if(t.isResponseError(s))throw s.error;return s.signedTxXdr}{if(await this.openWallet(),!this.target||!this.targetPublicKey)throw new Error("xBull Wallet is not open, we can't connect with it");if("string"!=typeof e.xdr)throw new Error("XDR provided needs to be a string value");const{message:r,oneTimeCode:n}=this.encryptForReceiver({data:JSON.stringify(e),receiverPublicKey:s.decodeBase64(this.targetPublicKey)}),o={type:t.EventType.XBULL_SIGN,message:r,oneTimeCode:n};this.target.postMessage(o,"*");const c=this.signResult$.asObservable().pipe(i.switchMap((e=>e.success?(this.closeWallet(),i.of(e.xdr)):(this.closeWallet(),i.throwError((()=>new Error(e.message))))))).pipe(i.take(1)).pipe(i.takeUntil(this.closeCurrentPromises$)).pipe(i.takeUntil(this.closeObservables$));return i.firstValueFrom(c)}}closeConnections(){this.closeObservables$.next(),this.closeCurrentPromises$.next(),this.closeObservables$.complete(),this.closeCurrentPromises$.complete()}};
//# sourceMappingURL=index.cjs.map
