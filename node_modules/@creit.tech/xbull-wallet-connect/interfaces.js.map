{"version":3,"file":"interfaces.js","sources":["../src/interfaces.ts"],"sourcesContent":["export enum EventType {\n  XBULL_CONNECT = 'XBULL_CONNECT',\n  XBULL_GET_PUBLIC_KEY = 'XBULL_GET_PUBLIC_KEY',\n  XBULL_SIGN_XDR = 'XBULL_SIGN_XDR',\n  XBULL_GET_NETWORK = 'XBULL_GET_NETWORK',\n\n\n  XBULL_INITIAL_RESPONSE = 'XBULL_INITIAL_RESPONSE',\n  XBULL_CONNECT_RESPONSE = 'XBULL_CONNECT_RESPONSE',\n  XBULL_SIGN = 'XBULL_SIGN',\n  XBULL_SIGN_RESPONSE = 'XBULL_SIGN_RESPONSE',\n}\n\nexport interface ISDKConstructor {\n  url?: string;\n  preferredTarget?: 'extension' | 'website'; // Default is extension\n}\n\nexport interface IConnectParams {\n  canRequestPublicKey: boolean;\n  canRequestSign: boolean;\n}\n\nexport interface IConnectResult {\n  success: true;\n  publicKey: string;\n}\n\nexport interface ISignParams {\n  xdr: string;\n  publicKey?: string;\n  network?: string;\n}\n\nexport interface ISignResult {\n  success: true;\n  xdr: string;\n}\n\nexport interface IRejectResult {\n  success: false;\n  message?: string;\n}\n\n// REQUESTS TO WALLET\nexport interface IConnectRequestData {\n  type: EventType.XBULL_CONNECT;\n  message: string; // IConnectParams JSON version\n  oneTimeCode: string;\n}\n\nexport interface ISignRequestData {\n  type: EventType.XBULL_SIGN;\n  message: string; // IConnectParams JSON version\n  oneTimeCode: string;\n}\n\n// RESPONSES FROM WALLET\ninterface BaseResponse {\n  type: EventType;\n  message?: string; // base64 encrypted string response\n  oneTimeCode?: string; // base64 string\n}\n\n// All values are base64 encrypted values\nexport interface InitialResponseListenerData extends Required<BaseResponse> {\n  type: EventType.XBULL_INITIAL_RESPONSE;\n  publicKey: string;\n}\n\nexport interface IConnectResponseData extends Required<BaseResponse> {\n  type: EventType.XBULL_CONNECT_RESPONSE;\n  success: true;\n}\n\nexport interface ISignResponseData extends Required<BaseResponse> {\n  type: EventType.XBULL_SIGN_RESPONSE;\n  success: true;\n}\n\nexport interface IRejectResponse extends Pick<BaseResponse, 'type'> {\n  success: false;\n}\n\nexport type SdkResponse<T> = T | { error: SdkError };\n\nexport function isResponseError<T>(response: SdkResponse<T>): response is { error: SdkError } {\n  return !!(response as any).error;\n}\n\ninterface SdkError {\n  message: string;    // general description message returned to the client app\n  code: number;       // unique error code\n  ext?: Array<string>;  // optional extended details\n}\n\n/**\n * @deprecated\n */\nexport interface ISitePermissions {\n  canRequestPublicKey: boolean;\n  canRequestSign: boolean;\n}\n\nexport interface IConnectRequestPayload {\n  origin: string;\n  host: string;\n  permissions: ISitePermissions;\n}\n\nexport interface IGetPublicKeyRequestPayload {\n  origin: string;\n  host: string;\n}\n\nexport interface IGetNetworkRequestPayload {\n  origin: string;\n  host: string;\n}\n\nexport interface ISignXDRRequestPayload {\n  origin: string;\n  host: string;\n  xdr: string;\n  xdrType: 'Transaction' | 'AuthEntry';\n  publicKey?: string;\n  network?: string;\n}\n// ----- SDK and Content script types END\n\n// ----- Background and Content script types\nexport interface IRuntimeConnectResponse {\n  error: false;\n  payload: ISitePermissions;\n}\n\nexport interface IRuntimeGetPublicKeyResponse {\n  error: false;\n  payload: string;\n}\n\nexport interface IRuntimeSignXDRResponse {\n  error: false;\n  payload: {\n    signedXdr: string;\n    signerAddress: string;\n  };\n}\n\nexport interface IRuntimeGetNetworkResponse {\n  error: false;\n  payload: {\n    network: string,\n    networkPassphrase: string\n  };\n}\n\nexport interface IRuntimeErrorResponse {\n  error: true;\n  errorMessage: string;\n  code?: number;\n}\n\nexport type RuntimeResponse = IRuntimeConnectResponse\n  | IRuntimeGetPublicKeyResponse\n  | IRuntimeSignXDRResponse\n  | IRuntimeErrorResponse\n  | IRuntimeGetNetworkResponse;\n// ----- Background and Content script types END\n"],"names":["EventType","isResponseError","response","error"],"mappings":"AAAY,IAAAA,GAAAA,IACVA,EAAgB,cAAA,gBAChBA,EAAuB,qBAAA,uBACvBA,EAAiB,eAAA,iBACjBA,EAAoB,kBAAA,oBAGpBA,EAAyB,uBAAA,yBACzBA,EAAyB,uBAAA,yBACzBA,EAAa,WAAA,aACbA,EAAsB,oBAAA,sBAVZA,IAAAA,GAAA,CAAA,GAsFL,SAASC,EAAmBC,GAC1B,QAAGA,EAAiBC,KAC7B"}