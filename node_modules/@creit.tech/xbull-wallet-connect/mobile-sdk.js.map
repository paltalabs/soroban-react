{"version":3,"file":"mobile-sdk.js","sources":["../src/mobile-sdk.ts"],"sourcesContent":["import {\n  EventType,\n  IConnectRequestPayload,\n  IGetNetworkRequestPayload,\n  IGetPublicKeyRequestPayload,\n  IRuntimeConnectResponse,\n  IRuntimeErrorResponse, IRuntimeGetNetworkResponse,\n  IRuntimeGetPublicKeyResponse,\n  IRuntimeSignXDRResponse,\n  ISignXDRRequestPayload,\n  SdkResponse,\n} from './interfaces';\n\nexport class xBullSDK {\n  isConnected = false;\n\n  constructor() {}\n\n  private sendEventToContentScript<T, R>(eventName: EventType, payload: T, nonce: string): Promise<{ data: { detail: R; eventId: string; returnFromCS?: boolean } }> {\n    return new Promise<{ data: { detail: R; eventId: string; returnFromCS?: boolean } }>(resolve => {\n      const eventListener = (event: any) => {\n        if (event.source !== window || !event.data || event.origin !== window.origin) {\n          return;\n        }\n\n        const response = event.data as { detail: R; eventId: string; returnFromCS?: boolean };\n\n        if (response.eventId === nonce) {\n          resolve(event);\n          window.removeEventListener('message', eventListener, false);\n        }\n      };\n\n      window.addEventListener('message', eventListener, false);\n\n      (window as any).webkit.messageHandlers.cordova_iab.postMessage(JSON.stringify({\n        type: eventName,\n        eventId: nonce,\n        detail: payload,\n      }));\n    });\n  }\n\n  /**\n   * This function ask the user to confirm they want to accept request from this website,\n   * this function is automatically called when using other functions.\n   */\n  async enableConnection(): Promise<void> {\n    const dispatchEventParams: IConnectRequestPayload = {\n      origin: window.origin,\n      host: window.location.host,\n      permissions: { canRequestPublicKey: true, canRequestSign: true },\n    };\n\n    const response = await this.sendEventToContentScript<\n      IConnectRequestPayload,\n      IRuntimeConnectResponse | IRuntimeErrorResponse\n    >(EventType.XBULL_CONNECT, dispatchEventParams, crypto.randomUUID());\n    const { detail } = response.data;\n\n    if (!detail || detail.error) {\n      throw {\n        code: detail?.code || -1,\n        message: detail?.errorMessage || 'Unexpected error',\n      };\n    }\n\n    this.isConnected = true;\n  }\n\n  /**\n   * https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0043.md#signtransaction\n   */\n  async getAddress(): Promise<SdkResponse<{ address: string }>> {\n    try {\n      await this.enableConnection();\n    } catch (e: any) {\n      return {\n        error: {\n          code: e?.code || -1,\n          message: e?.message || 'Unexpected error',\n        }\n      };\n    }\n\n    const dispatchEventParams: IGetPublicKeyRequestPayload = {\n      origin: window.origin,\n      host: window.location.host,\n    };\n\n    const response = await this.sendEventToContentScript<\n      IGetPublicKeyRequestPayload,\n      IRuntimeGetPublicKeyResponse | IRuntimeErrorResponse\n    >(EventType.XBULL_GET_PUBLIC_KEY, dispatchEventParams, crypto.randomUUID());\n\n    const { detail } = response.data;\n\n    if (!detail || detail.error) {\n      return {\n        error: {\n          code: detail?.code || -1,\n          message: detail?.errorMessage || 'Unexpected error',\n        }\n      };\n    }\n\n    return { address: detail.payload };\n  }\n\n  /**\n   * https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0043.md#signtransaction\n   */\n  async signTransaction(params: {\n    xdr: string,\n    opts?: {\n      networkPassphrase?: string,\n      address?: string;\n      submit?: boolean;\n      submitUrl?: string;\n    };\n  }): Promise<SdkResponse<{ signedTxXdr: string; signerAddress: string; }>> {\n    if (params.opts?.submit || params.opts?.submitUrl) {\n      return {\n        error: {\n          code: -1,\n          message: 'Parameters `submit` and `submitUrl` are not supported',\n        },\n      };\n    }\n\n    try {\n      await this.enableConnection();\n    } catch (e: any) {\n      return {\n        error: {\n          code: e?.code || -1,\n          message: e?.message || 'Unexpected error',\n        }\n      };\n    }\n\n    const dispatchEventParams: ISignXDRRequestPayload = {\n      origin: window.origin,\n      host: window.location.host,\n      network: params.opts?.networkPassphrase,\n      publicKey: params.opts?.address,\n      xdr: params.xdr,\n      xdrType: 'Transaction',\n    };\n\n    const response = await this.sendEventToContentScript<\n      ISignXDRRequestPayload,\n      IRuntimeSignXDRResponse | IRuntimeErrorResponse\n    >(EventType.XBULL_SIGN_XDR, dispatchEventParams, crypto.randomUUID());\n\n    const { detail } = response.data;\n\n    if (!detail || detail.error) {\n      return {\n        error: {\n          code: detail?.code || -1,\n          message: detail?.errorMessage || 'Unexpected error',\n        }\n      };\n    }\n\n    return {\n      signedTxXdr: detail.payload.signedXdr,\n      signerAddress: detail.payload.signerAddress,\n    };\n  }\n\n  /**\n   * This method returns the information of the currently selected network\n   */\n  async getNetwork(): Promise<SdkResponse<{ network: string; networkPassphrase: string; }>> {\n    try {\n      await this.enableConnection();\n    } catch (e: any) {\n      return {\n        error: {\n          code: e?.code || -1,\n          message: e?.message || 'Unexpected error',\n        }\n      };\n    }\n\n    const dispatchEventParams: IGetNetworkRequestPayload = {\n      origin: window.origin,\n      host: window.location.host,\n    };\n\n    const response = await this.sendEventToContentScript<\n      IGetNetworkRequestPayload,\n      IRuntimeGetNetworkResponse | IRuntimeErrorResponse\n    >(EventType.XBULL_GET_NETWORK, dispatchEventParams, crypto.randomUUID());\n\n    const { detail } = response.data;\n\n    if (!detail || detail.error) {\n      return {\n        error: {\n          code: detail?.code || -1,\n          message: detail?.errorMessage || 'Unexpected error',\n        }\n      };\n    }\n\n    return {\n      network: detail.payload.network,\n      networkPassphrase: detail.payload.networkPassphrase,\n    };\n  }\n}\n"],"names":["xBullSDK","constructor","this","isConnected","sendEventToContentScript","eventName","payload","nonce","Promise","resolve","eventListener","event","source","window","data","origin","eventId","removeEventListener","addEventListener","webkit","messageHandlers","cordova_iab","postMessage","JSON","stringify","type","detail","enableConnection","dispatchEventParams","host","location","permissions","canRequestPublicKey","canRequestSign","response","EventType","XBULL_CONNECT","crypto","randomUUID","error","code","message","errorMessage","getAddress","e","XBULL_GET_PUBLIC_KEY","address","signTransaction","params","opts","submit","submitUrl","network","networkPassphrase","publicKey","xdr","xdrType","XBULL_SIGN_XDR","signedTxXdr","signedXdr","signerAddress","getNetwork","XBULL_GET_NETWORK"],"mappings":"4CAaO,MAAMA,EAGX,WAAAC,GAFcC,KAAAC,aAAA,CAEC,CAEP,wBAAAC,CAA+BC,EAAsBC,EAAYC,GAChE,OAAA,IAAIC,SAAqFC,IACxF,MAAAC,EAAiBC,IACjB,GAAAA,EAAMC,SAAWC,SAAWF,EAAMG,MAAQH,EAAMI,SAAWF,OAAOE,OACpE,OAGeJ,EAAMG,KAEVE,UAAYT,IACvBE,EAAQE,GACDE,OAAAI,oBAAoB,UAAWP,GAAe,GACvD,EAGKG,OAAAK,iBAAiB,UAAWR,GAAe,GAEjDG,OAAeM,OAAOC,gBAAgBC,YAAYC,YAAYC,KAAKC,UAAU,CAC5EC,KAAMpB,EACNW,QAAST,EACTmB,OAAQpB,IACR,GAEN,CAMA,sBAAMqB,GACJ,MAAMC,EAA8C,CAClDb,OAAQF,OAAOE,OACfc,KAAMhB,OAAOiB,SAASD,KACtBE,YAAa,CAAEC,qBAAqB,EAAMC,gBAAgB,IAGtDC,QAAiBhC,KAAKE,yBAG1B+B,EAAUC,cAAeR,EAAqBS,OAAOC,eACjDZ,OAAEA,GAAWQ,EAASpB,KAExB,IAACY,GAAUA,EAAOa,MACd,KAAA,CACJC,KAAMd,GAAQc,OAAQ,EACtBC,QAASf,GAAQgB,cAAgB,oBAIrCxC,KAAKC,aAAc,CACrB,CAKA,gBAAMwC,GACA,UACIzC,KAAKyB,yBACJiB,GACA,MAAA,CACLL,MAAO,CACLC,KAAMI,GAAGJ,OAAQ,EACjBC,QAASG,GAAGH,SAAW,oBAG7B,CAEA,MAAMb,EAAmD,CACvDb,OAAQF,OAAOE,OACfc,KAAMhB,OAAOiB,SAASD,MAGlBK,QAAiBhC,KAAKE,yBAG1B+B,EAAUU,qBAAsBjB,EAAqBS,OAAOC,eAExDZ,OAAEA,GAAWQ,EAASpB,KAExB,OAACY,GAAUA,EAAOa,MACb,CACLA,MAAO,CACLC,KAAMd,GAAQc,OAAQ,EACtBC,QAASf,GAAQgB,cAAgB,qBAKhC,CAAEI,QAASpB,EAAOpB,QAC3B,CAKA,qBAAMyC,CAAgBC,GASpB,GAAIA,EAAOC,MAAMC,QAAUF,EAAOC,MAAME,UAC/B,MAAA,CACLZ,MAAO,CACLC,MAAM,EACNC,QAAS,0DAKX,UACIvC,KAAKyB,yBACJiB,GACA,MAAA,CACLL,MAAO,CACLC,KAAMI,GAAGJ,OAAQ,EACjBC,QAASG,GAAGH,SAAW,oBAG7B,CAEA,MAAMb,EAA8C,CAClDb,OAAQF,OAAOE,OACfc,KAAMhB,OAAOiB,SAASD,KACtBuB,QAASJ,EAAOC,MAAMI,kBACtBC,UAAWN,EAAOC,MAAMH,QACxBS,IAAKP,EAAOO,IACZC,QAAS,eAGLtB,QAAiBhC,KAAKE,yBAG1B+B,EAAUsB,eAAgB7B,EAAqBS,OAAOC,eAElDZ,OAAEA,GAAWQ,EAASpB,KAExB,OAACY,GAAUA,EAAOa,MACb,CACLA,MAAO,CACLC,KAAMd,GAAQc,OAAQ,EACtBC,QAASf,GAAQgB,cAAgB,qBAKhC,CACLgB,YAAahC,EAAOpB,QAAQqD,UAC5BC,cAAelC,EAAOpB,QAAQsD,cAElC,CAKA,gBAAMC,GACA,UACI3D,KAAKyB,yBACJiB,GACA,MAAA,CACLL,MAAO,CACLC,KAAMI,GAAGJ,OAAQ,EACjBC,QAASG,GAAGH,SAAW,oBAG7B,CAEA,MAAMb,EAAiD,CACrDb,OAAQF,OAAOE,OACfc,KAAMhB,OAAOiB,SAASD,MAGlBK,QAAiBhC,KAAKE,yBAG1B+B,EAAU2B,kBAAmBlC,EAAqBS,OAAOC,eAErDZ,OAAEA,GAAWQ,EAASpB,KAExB,OAACY,GAAUA,EAAOa,MACb,CACLA,MAAO,CACLC,KAAMd,GAAQc,OAAQ,EACtBC,QAASf,GAAQgB,cAAgB,qBAKhC,CACLU,QAAS1B,EAAOpB,QAAQ8C,QACxBC,kBAAmB3B,EAAOpB,QAAQ+C,kBAEtC"}